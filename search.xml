<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git第二次培训</title>
      <link href="/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/"/>
      <url>/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<h5 id="1-到底如何撤销"><a href="#1-到底如何撤销" class="headerlink" title="1 到底如何撤销"></a>1 到底如何撤销</h5><blockquote><p>很多人问我 我到底该如何撤销某部分代码？这个要分不同的阶段来处理。</p></blockquote><ul><li><p>已经commit</p><p>可以通过<code>git reset</code>来回滚版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard CommitID</span><br><span class="line">git reset --hard Head~</span><br></pre></td></tr></table></figure><p>还可以通过<code>git revert</code>来反做指定<code>CommitID</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert CommitID</span><br></pre></td></tr></table></figure><blockquote><p>原理： git revert是用于“反做”某一个版本，以达到撤销该版本的修改的目的。比如，我们commit了三个版本（版本一、版本二、 版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西。如下图所示：</p></blockquote></li></ul><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/revert.png" alt="revert"></p><p>git revert 之后会形成一个新的提交</p><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331092916283.png" alt="image-20230331092916283"></p><ul><li><p>已经add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged .</span><br><span class="line">git restore --staged FileName</span><br></pre></td></tr></table></figure></li><li><p>还未add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br><span class="line">git checkout FileName</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-一个bug到底要修几次"><a href="#2-一个bug到底要修几次" class="headerlink" title="2 一个bug到底要修几次"></a>2 一个bug到底要修几次</h5><blockquote><p>我在<code>dev</code>分支已经修改某个bug了（或者别人已修复过该bug了），但是我还有功能没开发完，不能合并分支，线上又急需修复这个bug，我该怎么办，是去<code>main</code> 分支再修复一遍吗？</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git cherry-pick c091b35</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331112341421.png" alt="image-20230331112341421"></p><h5 id="3-新功能开发了一半，如何去别的分支修bug"><a href="#3-新功能开发了一半，如何去别的分支修bug" class="headerlink" title="3 新功能开发了一半，如何去别的分支修bug"></a>3 新功能开发了一半，如何去别的分支修bug</h5><blockquote><p>由于我当前所处的feature分支是不干净的（有未提交的内容），这时候是切换不了分支，拉取不了新内容的。</p></blockquote><p>有三种应对方式：</p><ol><li>丢弃当前分支上的新开发内容 （相当于这一部分白干）</li><li>将开发一半的功能进行提交 （由于开发没完成 可能导致程序跑不起来）</li><li>通过git stash 暂存当前分支的开发场景，让当前分支保持干净，处理完其他工作之后，可以通过git stash 恢复当前分支工作区状态</li></ol><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331114527036.png" alt="image-20230331114527036"></p><p>从stash恢复保存的工作区场景</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash apply stash@&#123;0&#125;</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>从stash删除暂存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash drop stash@&#123;0&#125;</span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure><h5 id="4-瞎写的提交备注怎么修改"><a href="#4-瞎写的提交备注怎么修改" class="headerlink" title="4 瞎写的提交备注怎么修改"></a>4 瞎写的提交备注怎么修改</h5><blockquote><p>很多人喜欢写一些无意义的提交备注 这非常不可取 这与不用版本管理无异 因为时间长了以后 你根本不知道该提交是什么</p></blockquote><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331123344670.png" alt="image-20230331123344670"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i Head~3</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331123649819.png" alt="image-20230331123649819"></p><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331124536856.png" alt="image-20230331124536856"></p><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331124418267.png" alt="image-20230331124418267"></p><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331124627231.png" alt="image-20230331124627231"></p><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331124707734.png" alt="image-20230331124707734"></p><h5 id="5-一个功能本地分了好几个提交，如何合并为一个完整提交"><a href="#5-一个功能本地分了好几个提交，如何合并为一个完整提交" class="headerlink" title="5 一个功能本地分了好几个提交，如何合并为一个完整提交"></a>5 一个功能本地分了好几个提交，如何合并为一个完整提交</h5><blockquote><p>一个功能分好几个提交，push之后会让其他的合作开发人员感到费解，摸不着头脑，也不利于后期版本管理快速找到某一功能</p></blockquote><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331125132641.png" alt="image-20230331125132641"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i Head~3</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331125726442.png" alt="image-20230331125726442"></p><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331125756503.png" alt="image-20230331125756503"></p><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331125807140.png" alt="image-20230331125807140"></p><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331125816752.png" alt="image-20230331125816752"></p><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331125837296.png" alt="image-20230331125837296"></p><h5 id="6-push的时候，警告换行符问题"><a href="#6-push的时候，警告换行符问题" class="headerlink" title="6 push的时候，警告换行符问题"></a>6 push的时候，警告换行符问题</h5><blockquote><p>如果不管警告 push上去之后 协同开发的人员拉取下来，会影响他的代码比对</p></blockquote><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20220708100349895.png" alt="image-20220708100349895"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐配置</span></span><br><span class="line"><span class="comment"># 提交检出均不转换</span></span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br><span class="line"><span class="comment"># 允许提交包含混合换行符的文件</span></span><br><span class="line">git config --global core.safecrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="7-怎么样快速定位冲突"><a href="#7-怎么样快速定位冲突" class="headerlink" title="7 怎么样快速定位冲突"></a>7 怎么样快速定位冲突</h5><blockquote><p><code>git mergetool</code>  冲突发生后，通过这个工具，很快就能定位到冲突发生的地方 方便进行冲突解决</p></blockquote><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331130831149.png" alt="image-20230331130831149"></p><p>注意：解决玩冲突之后一定要提交，要不然git是不知道你已经解决了冲突的。</p><h5 id="8-我-gitignore文件写晚了，已经提交并push了我不想被版本管理起来的文件"><a href="#8-我-gitignore文件写晚了，已经提交并push了我不想被版本管理起来的文件" class="headerlink" title="8 我.gitignore文件写晚了，已经提交并push了我不想被版本管理起来的文件"></a>8 我<code>.gitignore</code>文件写晚了，已经提交并push了我不想被版本管理起来的文件</h5><blockquote><p>一些文件由于在加入<code>.gitignore</code>之前已经被提交和推送了，但是我又不能删掉本地的，怎么处理？</p><p>比如：第三方库，临时编译文件，编译结果文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git ls-files</span><br><span class="line">git <span class="built_in">rm</span> --cached FileName</span><br><span class="line">git <span class="built_in">rm</span> -rf --cached DirName</span><br></pre></td></tr></table></figure><h5 id="9-分支模型和打标签"><a href="#9-分支模型和打标签" class="headerlink" title="9 分支模型和打标签"></a>9 分支模型和打标签</h5><p>主流的分支管理模型：</p><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20220706110531715.png" alt="image-20220706110531715"></p><p>打标签</p><blockquote><p>所谓<strong>Tag</strong>其实就是一种特殊的Branch，或者说是给某个CommitID取了个别名，主要作用为冻结版本，进行正式版本发布</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看标签</span></span><br><span class="line">git tag -l</span><br><span class="line"><span class="comment"># 打标签</span></span><br><span class="line">git tag -a V1.0.5 -m <span class="string">&quot;V1.0.5正式版本&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331132656190.png" alt="image-20230331132656190"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向远端推送标签</span></span><br><span class="line">git tag push origin TagName</span><br><span class="line">git tag push origin --tags</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2023/05/17/git%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/image-20230331132824314.png" alt="image-20230331132824314"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过标签获取发版版本到新分支</span></span><br><span class="line">git checkout -b 新分支名 TagName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签打包</span></span><br><span class="line">git archive TagName --format=zip --output=V1.0.5.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持的打包格式</span></span><br><span class="line">git archive --list</span><br><span class="line">tar</span><br><span class="line">tgz</span><br><span class="line">tar.gz</span><br><span class="line">zip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web调用exe</title>
      <link href="/2022/09/17/web%E8%B0%83%E7%94%A8exe/"/>
      <url>/2022/09/17/web%E8%B0%83%E7%94%A8exe/</url>
      
        <content type="html"><![CDATA[<blockquote><p>创建 <strong>.reg</strong> 注册表文件 并使用管理员权限执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Webshell]</span><br><span class="line">@=<span class="string">&quot;URL:webshell Protocol Handler&quot;</span></span><br><span class="line"><span class="string">&quot;URL Protocol&quot;</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">[HKEY_CLASSES_ROOT\Webshell\DefaultIcon]</span><br><span class="line">@=<span class="string">&quot;D:\\main.exe&quot;</span></span><br><span class="line">[HKEY_CLASSES_ROOT\Webshell\shell]</span><br><span class="line">[HKEY_CLASSES_ROOT\Webshell\shell\open]</span><br><span class="line">[HKEY_CLASSES_ROOT\Webshell\shell\open\<span class="built_in">command</span>]</span><br><span class="line">@=<span class="string">&quot;\&quot;D:\\main.exe\&quot; \&quot;%1\&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>只需要替换红线部分为目标exe路径</p></blockquote><p><img src="https://chengyijun.github.io/2022/09/17/web%E8%B0%83%E7%94%A8exe/image-20220917113058997.png" alt="image-20220917113058997"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>打开EXE<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;webshell://abel,rox,tank&quot;</span>&gt;</span></span><br><span class="line">    打开main.exe</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>main.py 生成 main.exe 做测试</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;传入的参数：&quot;</span>, sys.argv)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;wait&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/09/17/web%E8%B0%83%E7%94%A8exe/image-20220917113807820.png" alt="image-20220917113807820"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python上传文件</title>
      <link href="/2022/09/09/python%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2022/09/09/python%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, UploadFile, File</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/upload&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">file: UploadFile = File(<span class="params"></span>)</span>):</span><br><span class="line">    <span class="comment"># 这里的参数file必须与构建的file对象的key一致才行</span></span><br><span class="line">    <span class="built_in">print</span>(file.filename)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;upload-<span class="subst">&#123;file.filename&#125;</span>&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(file.file.read())</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;mes&quot;</span>: <span class="string">&quot;ok&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">f&quot;<span class="subst">&#123;Path(__file__).name.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]&#125;</span>:app&quot;</span>,</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                port=<span class="number">3000</span>,</span><br><span class="line">                debug=<span class="literal">True</span>,</span><br><span class="line">                reload=<span class="literal">True</span>,</span><br><span class="line">                workers=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要上传的文件</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;1.jpg&#x27;</span>, <span class="built_in">open</span>(<span class="string">&#x27;1.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>), <span class="string">&quot;image/jpg&quot;</span>)&#125;</span><br><span class="line">url = <span class="string">&quot;http://localhost:3000/upload&quot;</span></span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>supervisor+uwsgi+django</title>
      <link href="/2022/09/08/supervisor-uwsgi-django/"/>
      <url>/2022/09/08/supervisor-uwsgi-django/</url>
      
        <content type="html"><![CDATA[<h1 id="配置静态文件相关设置"><a href="#配置静态文件相关设置" class="headerlink" title="配置静态文件相关设置"></a>配置静态文件相关设置</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line">STATICFILES_DIRS = [BASE_DIR.joinpath(<span class="string">&quot;app/static&quot;</span>)]</span><br><span class="line">STATIC_ROOT = BASE_DIR.joinpath(<span class="string">&quot;static_all&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="执行收集静态文件"><a href="#执行收集静态文件" class="headerlink" title="执行收集静态文件"></a>执行收集静态文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><h1 id="测试uwsgi运行"><a href="#测试uwsgi运行" class="headerlink" title="测试uwsgi运行"></a>测试uwsgi运行</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两种形式都行（需要在指定的虚拟环境中执行）</span></span><br><span class="line"><span class="comment"># 需要进入 manage.py 同级目录</span></span><br><span class="line">uwsgi --http :9985 --wsgi-file=project01/wsgi.py --static-map /static=static_all</span><br><span class="line">uwsgi --http :9985 --module=project01.wsgi --static-map /static=static_all</span><br></pre></td></tr></table></figure><h1 id="创建-uwsgi-ini-文件"><a href="#创建-uwsgi-ini-文件" class="headerlink" title="创建 uwsgi.ini 文件"></a>创建 uwsgi.ini 文件</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">http</span>=<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9985</span></span><br><span class="line"><span class="attr">wsgi-file</span>=project01/wsgi.py</span><br><span class="line"><span class="attr">static-map</span>=/static=static_all</span><br><span class="line"><span class="attr">virtualenv</span>=/root/.venvs/py39</span><br></pre></td></tr></table></figure><h1 id="通过uwsgi-ini文件启动"><a href="#通过uwsgi-ini文件启动" class="headerlink" title="通过uwsgi.ini文件启动"></a>通过uwsgi.ini文件启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无需在虚拟环境中 因为uwsgi.ini 文件中已经指定了虚拟环境</span></span><br><span class="line">/usr/local/python39/bin/uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure><h1 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release supervisor -y</span><br></pre></td></tr></table></figure><h1 id="配置项目设置到supervisor"><a href="#配置项目设置到supervisor" class="headerlink" title="配置项目设置到supervisor"></a>配置项目设置到supervisor</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/supervisord.d/</span><br><span class="line">vim pj01.ini</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[program:pj01]</span></span><br><span class="line"><span class="attr">directory</span>=/root/project01</span><br><span class="line"><span class="attr">command</span>=/usr/local/python39/bin/uwsgi --ini uwsgi.ini</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">stderr_logfile</span>=/root/pj01/err.log</span><br><span class="line"><span class="attr">stdout_logfile</span>=/root/pj01/info.log</span><br><span class="line"><span class="comment">#user = test</span></span><br></pre></td></tr></table></figure><h1 id="开启-supervisord"><a href="#开启-supervisord" class="headerlink" title="开启 supervisord"></a>开启 supervisord</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord</span><br></pre></td></tr></table></figure><p>开启supervisor Web服务（可选 非必须）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/supervisord.conf</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/09/08/supervisor-uwsgi-django/image-20220908162413525.png" alt="image-20220908162413525"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart supervisord</span><br><span class="line">http://ip:9986 访问web控制页面</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/09/08/supervisor-uwsgi-django/image-20220908162545658.png" alt="image-20220908162545658"></p><p>命令控制 pj01 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl status</span><br><span class="line">supervisorctl start pj01</span><br><span class="line">supervisorctl stop pj01</span><br></pre></td></tr></table></figure><h1 id="也可以使用单独的配置文件启动-supervisor"><a href="#也可以使用单独的配置文件启动-supervisor" class="headerlink" title="也可以使用单独的配置文件启动 supervisor"></a>也可以使用单独的配置文件启动 supervisor</h1><p>vim looptest.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files=/etc/supervisord.conf</span><br><span class="line"></span><br><span class="line">[program:looptest] </span><br><span class="line">directory=/root/looptest</span><br><span class="line"><span class="built_in">command</span>=python3 test.py</span><br><span class="line">autostart=<span class="literal">true</span> </span><br><span class="line">autorestart=<span class="literal">false</span> </span><br><span class="line">stderr_logfile=/root/looptest/err.log</span><br><span class="line">stdout_logfile=/root/looptest/info.log</span><br><span class="line"><span class="comment">#user = test  </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c looptest.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习笔记</title>
      <link href="/2022/08/31/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/31/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化项目 生成 package.json 文件</span></span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm i webpack webpack-cli -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># npx 会将node_modules 中的库 临时添加到环境变量</span></span><br><span class="line"><span class="comment"># 命令行打包</span></span><br><span class="line">npx webpack ./src/main.js --mode=development</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django学习笔记</title>
      <link href="/2022/08/24/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/24/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="框架自带的认证和权限"><a href="#框架自带的认证和权限" class="headerlink" title="框架自带的认证和权限"></a>框架自带的认证和权限</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> login, authenticate</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, Permission</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> api10.models <span class="keyword">import</span> Article</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 判断用户是否存在</span></span><br><span class="line">        user: User = authenticate(username=<span class="string">&quot;rox&quot;</span>, password=<span class="string">&quot;abel&quot;</span>)</span><br><span class="line">        <span class="comment"># 将该用户绑定到request完成登录</span></span><br><span class="line">        login(request, user)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取用户的所有权限</span></span><br><span class="line">        <span class="comment"># print(user.get_all_permissions())</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询一个权限对象 从数据库中</span></span><br><span class="line">        <span class="comment"># p1 = Permission.objects.filter(codename=&quot;can_view&quot;).first()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 给用户删除一个权限</span></span><br><span class="line">        <span class="comment"># user.user_permissions.remove(p1)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 给用户添加一个权限</span></span><br><span class="line">        <span class="comment"># user.user_permissions.add(p1)</span></span><br><span class="line">        <span class="comment"># print(user.get_all_permissions())</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断用户是否具有某种权限  权限字符串见下文</span></span><br><span class="line">        <span class="comment"># app_name.codename</span></span><br><span class="line">        <span class="comment"># flag = user.has_perm(&quot;api10.can_view&quot;)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># print(flag)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 所谓的ContentType就是django提供的专门记录数据库中各种表信息的表</span></span><br><span class="line">        content_type = ContentType.objects.get_for_model(Article)</span><br><span class="line">        permission = Permission.objects.create(codename=<span class="string">&#x27;can_block&#x27;</span>,</span><br><span class="line">                                               name=<span class="string">&#x27;user can block article&#x27;</span>,</span><br><span class="line">                                               content_type=content_type)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;abel&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="框架自带的后台管理"><a href="#框架自带的后台管理" class="headerlink" title="框架自带的后台管理"></a>框架自带的后台管理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    username = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;姓名&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.admin <span class="keyword">import</span> ModelAdmin, register</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> api09.models <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register(<span class="params">Person</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonAdmin</span>(<span class="title class_ inherited__">ModelAdmin</span>):</span><br><span class="line">    list_display = [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;my_column&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># hook 自定义列方法</span></span><br><span class="line">    <span class="comment"># 方法名 与 list_display 里面指定的新增列名需要相同</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">my_column</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="comment"># obj是当前行的对象</span></span><br><span class="line">        <span class="built_in">print</span>(obj)</span><br><span class="line">        <span class="comment"># 返回值会作为 my_column 列的内容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;abel <span class="subst">&#123;obj.username&#125;</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/08/24/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220824135116381.png" alt="image-20220824135116381"></p><p><img src="https://chengyijun.github.io/2022/08/24/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220824135143033.png" alt="image-20220824135143033"></p><h1 id="继承和扩展框架提供的User模型"><a href="#继承和扩展框架提供的User模型" class="headerlink" title="继承和扩展框架提供的User模型"></a>继承和扩展框架提供的User模型</h1><blockquote><p>使用框架提供的User模型好处是 可以使用框架提供的 认证和权限 免除重复造轮子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyUser</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义用户模型类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 额外增加 mobile 字段      长度11位        号码唯一        别名</span></span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;手机号&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对当前表进行相关设置:</span></span><br><span class="line">    <span class="comment"># class Meta:</span></span><br><span class="line">    <span class="comment">#     db_table = &#x27;tb_users&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在 str 魔法方法中, 返回用户名称</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"><span class="comment"># 指定自定义的用户模型类 app_name.Model</span></span><br><span class="line"><span class="comment"># 通知django使用该类进行认证和权限</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;api08.MyUser&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="一对一-一对多-多对多"><a href="#一对一-一对多-多对多" class="headerlink" title="一对一 一对多 多对多"></a>一对一 一对多 多对多</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>(models.Model):</span><br><span class="line">    role_name = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;角色名称&quot;</span>)</span><br><span class="line">    <span class="comment"># 多对多 不需要 on_delete</span></span><br><span class="line">    <span class="comment"># 多对多 由于会产生中间表 中间表产生关联两头的外键 所以不会在本表中生成一个新的外键字段</span></span><br><span class="line">    users = models.ManyToManyField(to=<span class="string">&quot;UserInfo&quot;</span>, related_name=<span class="string">&quot;user_roles&quot;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span>(models.Model):</span><br><span class="line">    group_name = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;组名称&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    username = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;用户名&quot;</span>)</span><br><span class="line">    <span class="comment"># ForeignKey 会在本表产生一个 group_id 的外键字段</span></span><br><span class="line">    <span class="comment"># related_name=&quot;group_users&quot; 反向查询   其实就相当于在 Group表中 产生一个虚拟的 group_users字段 用户查询 group_obj.group_users.all()</span></span><br><span class="line">    group = models.ForeignKey(to=Group, on_delete=models.CASCADE, related_name=<span class="string">&quot;group_users&quot;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserToken</span>(models.Model):</span><br><span class="line">    token = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;token&quot;</span>)</span><br><span class="line">    user = models.OneToOneField(to=UserInfo, on_delete=models.CASCADE, related_name=<span class="string">&quot;user_token&quot;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># OneToOneField 相当于 ForeignKey + unique约束</span></span><br><span class="line">    <span class="comment"># user = models.ForeignKey(to=UserInfo, on_delete=models.CASCADE, related_name=&quot;user_token&quot;, null=True, blank=True,</span></span><br><span class="line">    <span class="comment">#                          unique=True)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line"></span><br><span class="line">sys.path.append(os.getcwd())</span><br><span class="line">os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;drfreview.settings&quot;</span>)</span><br><span class="line"></span><br><span class="line">django.setup()</span><br><span class="line"><span class="keyword">from</span> api07.models <span class="keyword">import</span> UserInfo, Role</span><br><span class="line"></span><br><span class="line"><span class="comment"># u1 = UserInfo.objects.create(username=&quot;abel&quot;)</span></span><br><span class="line"><span class="comment"># UserToken.objects.create(token=str(uuid4()), user=u1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正向查找</span></span><br><span class="line"><span class="comment"># ut: UserToken = UserToken.objects.first()</span></span><br><span class="line"><span class="comment"># print(ut.user)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向查找</span></span><br><span class="line">user: UserInfo = UserInfo.objects.first()</span><br><span class="line"><span class="built_in">print</span>(user)</span><br><span class="line"><span class="comment"># print(user.user_token.all())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">roles = user.user_roles.<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(roles)</span><br><span class="line"></span><br><span class="line">r1: Role = Role.objects.<span class="built_in">filter</span>(role_name=<span class="string">&quot;老师&quot;</span>).first()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r1.users.<span class="built_in">all</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># r1.users.add(UserInfo.objects.create(username=&quot;rox&quot;))</span></span><br></pre></td></tr></table></figure><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r&#x27;^test2/(?P&lt;version&gt;[v1|v2|v3]+)/$&#x27;</span>, Test2View.as_view(), name=<span class="string">&quot;test2&quot;</span>),</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> URLPathVersioning</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2View</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    versioning_class = URLPathVersioning</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># version = request.GET.get(&quot;version&quot;)</span></span><br><span class="line">        <span class="built_in">print</span>(request.version, request.versioning_scheme)</span><br><span class="line">        data = &#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> Response(data=data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;VERSION_PARAM&#x27;</span>: <span class="string">&#x27;version&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DEFAULT_VERSION&#x27;</span>: <span class="string">&#x27;v1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ALLOWED_VERSIONS&#x27;</span>: [<span class="string">&#x27;v1&#x27;</span>, <span class="string">&#x27;v2&#x27;</span>],</span><br><span class="line">    <span class="comment"># &#x27;DEFAULT_VERSIONING_CLASS&#x27;: &#x27;rest_framework.versioning.URLPathVersioning&#x27;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/08/24/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220824140753029.png" alt="image-20220824140753029"></p><h1 id="访问频率控制"><a href="#访问频率控制" class="headerlink" title="访问频率控制"></a>访问频率控制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> SimpleRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MT2</span>(<span class="title class_ inherited__">SimpleRateThrottle</span>):</span><br><span class="line">    scope = <span class="string">&quot;scope&quot;</span></span><br><span class="line">    THROTTLE_RATES = &#123;</span><br><span class="line">        <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;3/m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cache_key</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="keyword">if</span> request.META.get(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>):</span><br><span class="line">            ip = request.META.get(<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ip = request.META.get(<span class="string">&quot;REMOTE_ADDR&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VISIT_RECORD = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from rest_framework.throttling import BaseThrottle</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThrottle</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    完全自定义的频率控制  有助于了解节流原理</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.records = <span class="literal">None</span></span><br><span class="line">        self.duration = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request: Request, view</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        重写该方法 进行计算是否被限流</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :param view:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> request.META.get(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>):</span><br><span class="line">            ip = request.META.get(<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ip = request.META.get(<span class="string">&quot;REMOTE_ADDR&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(ip)</span><br><span class="line">        now = time.time()</span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> VISIT_RECORD:</span><br><span class="line">            VISIT_RECORD.update(&#123;ip: [now]&#125;)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            records = VISIT_RECORD.get(ip)</span><br><span class="line">            self.records = records</span><br><span class="line">            <span class="keyword">while</span> records <span class="keyword">and</span> now - records[-<span class="number">1</span>] &gt; self.duration:</span><br><span class="line">                records.pop()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(records) &lt; <span class="number">3</span>:</span><br><span class="line">                records.insert(<span class="number">0</span>, now)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        重写该方法 用来提示节流还有多上时间结束</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.duration - (time.time() - self.records[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    throttle_classes = [MT2]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        data = &#123;<span class="string">&quot;code&quot;</span>: <span class="number">111</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> Response(data=data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/08/24/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220824141352016.png" alt="image-20220824141352016"></p><h1 id="ContentType-django提供的多表关联"><a href="#ContentType-django提供的多表关联" class="headerlink" title="ContentType django提供的多表关联"></a>ContentType django提供的多表关联</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericForeignKey, GenericRelation</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;课程名称&quot;</span>)</span><br><span class="line">    <span class="comment"># 不生成数据库字段  反向关联 course_obj.prices.all() 拿到所有的价格策略</span></span><br><span class="line">    prices = GenericRelation(<span class="string">&quot;PricePolicy&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DegreeCourse</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;课程名称&quot;</span>)</span><br><span class="line">    <span class="comment"># 不生成数据库字段  反向关联</span></span><br><span class="line">    prices = GenericRelation(<span class="string">&quot;PricePolicy&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PricePolicy</span>(models.Model):</span><br><span class="line">    price = models.FloatField(verbose_name=<span class="string">&quot;价格&quot;</span>)</span><br><span class="line"></span><br><span class="line">    content_type = models.ForeignKey(ContentType, verbose_name=<span class="string">&quot;关联表的表名&quot;</span>, on_delete=models.CASCADE)</span><br><span class="line">    object_id = models.IntegerField(verbose_name=<span class="string">&quot;关联表中的行ID&quot;</span>)</span><br><span class="line">    <span class="comment"># 不生成字段 辅助content type 操作</span></span><br><span class="line">    <span class="comment"># PricePolicy.objects.create(price=9.9, content_object=course_obj)</span></span><br><span class="line">    content_object = GenericForeignKey(<span class="string">&quot;content_type&quot;</span>, <span class="string">&quot;object_id&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> api04.models <span class="keyword">import</span> DegreeCourse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        obj = DegreeCourse.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;Java&quot;</span>).first()</span><br><span class="line">        <span class="comment"># PricePolicy.objects.create(price=9.9, content_object=obj)</span></span><br><span class="line">        <span class="comment"># PricePolicy.objects.create(price=19.9, content_object=obj)</span></span><br><span class="line">        <span class="comment"># PricePolicy.objects.create(price=29.9, content_object=obj)</span></span><br><span class="line">        <span class="built_in">print</span>(obj.prices.<span class="built_in">all</span>())</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="模型管理器"><a href="#模型管理器" class="headerlink" title="模型管理器"></a>模型管理器</h1><blockquote><p>可以在模型管理器中自定义方法</p><p>可以在模型管理器中重写filter，做逻辑删除</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models, connection</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyBaseModelManager</span>(models.Manager):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().get_queryset().<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">raw_sql_query</span>(<span class="params">sql: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span> <span class="keyword">or</span> <span class="built_in">int</span>]]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        原生sql查询</span></span><br><span class="line"><span class="string">        :param sql:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            columns = [col[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> cursor.description]</span><br><span class="line">            datas = [<span class="built_in">dict</span>(<span class="built_in">zip</span>(columns, row)) <span class="keyword">for</span> row <span class="keyword">in</span> cursor.fetchall()]</span><br><span class="line">            <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModelManager</span>(<span class="title class_ inherited__">MyBaseModelManager</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_id_gt_5</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.model.mm.<span class="built_in">filter</span>(id__gt=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_id_lt_5</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.model.mm.<span class="built_in">filter</span>(id__lt=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;名字&quot;</span>)</span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&quot;是否被删除&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定模型管理器 默认为 objects</span></span><br><span class="line">    mm = MyModelManager()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> - <span class="subst">&#123;self.is_delete&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    page_size = <span class="number">3</span></span><br><span class="line">    page_size_query_param = <span class="string">&quot;size&quot;</span></span><br><span class="line">    max_page_size = <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T2View</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    pagination_class = MyPagination</span><br></pre></td></tr></table></figure><h1 id="swagger接口文档"><a href="#swagger接口文档" class="headerlink" title="swagger接口文档"></a>swagger接口文档</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install drf_yasg</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">...</span><br><span class="line">    <span class="string">&quot;rest_framework&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;drf_yasg&#x27;</span>,  <span class="comment"># swagger文档</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> drf_yasg <span class="keyword">import</span> openapi</span><br><span class="line"><span class="keyword">from</span> drf_yasg.views <span class="keyword">import</span> get_schema_view</span><br><span class="line"></span><br><span class="line">schema_view = get_schema_view(</span><br><span class="line">    openapi.Info(</span><br><span class="line">        title=<span class="string">&quot;接口文档平台&quot;</span>,  <span class="comment"># 必传</span></span><br><span class="line">        default_version=<span class="string">&#x27;v1&#x27;</span>,  <span class="comment"># 必传</span></span><br><span class="line">        description=<span class="string">&quot;文档描述&quot;</span>,</span><br><span class="line">        terms_of_service=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        contact=openapi.Contact(email=<span class="string">&quot;1093254791@qq.com&quot;</span>),</span><br><span class="line">        license=openapi.License(name=<span class="string">&quot;BSD LICENSE&quot;</span>)</span><br><span class="line">    ),</span><br><span class="line">    public=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># permission_classes=(permissions.)  # 权限类</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">&#x27;swagger/&#x27;</span>, schema_view.with_ui(<span class="string">&#x27;swagger&#x27;</span>, cache_timeout=<span class="number">0</span>), name=<span class="string">&#x27;schema-swagger&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;redoc/&#x27;</span>, schema_view.with_ui(<span class="string">&#x27;redoc&#x27;</span>, cache_timeout=<span class="number">0</span>), name=<span class="string">&#x27;schema-redoc&#x27;</span>),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> drf_yasg <span class="keyword">import</span> openapi</span><br><span class="line"><span class="keyword">from</span> drf_yasg.utils <span class="keyword">import</span> swagger_auto_schema</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @swagger_auto_schema(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">        <span class="comment"># 接口描述，支持markdown语法</span></span></span></span><br><span class="line"><span class="params"><span class="meta">        operation_description=<span class="string">&quot;&quot;&quot; 用户列表&quot;&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">        <span class="comment"># 接口参数 GET请求参数</span></span></span></span><br><span class="line"><span class="params"><span class="meta">        manual_parameters=[</span></span></span><br><span class="line"><span class="params"><span class="meta">            <span class="comment"># 声明参数</span></span></span></span><br><span class="line"><span class="params"><span class="meta">            openapi.Parameter(<span class="params"></span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                <span class="comment"># 参数名称</span></span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                <span class="string">&quot;name&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                <span class="comment"># 参数形式  ?name=abel 的形式传参</span></span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                openapi.IN_QUERY,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                <span class="comment"># 参数描述</span></span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                description=<span class="string">&quot;用户名称模糊搜索&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                <span class="comment"># 参数类型</span></span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                <span class="built_in">type</span>=openapi.TYPE_STRING,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                <span class="comment"># 是否必填</span></span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                required=<span class="literal">True</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">            </span>),</span></span></span><br><span class="line"><span class="params"><span class="meta">        ],</span></span></span><br><span class="line"><span class="params"><span class="meta">        <span class="comment"># 接口标题</span></span></span></span><br><span class="line"><span class="params"><span class="meta">        operation_summary=<span class="string">&#x27;用户列表&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">        <span class="comment"># 接口所属分组，会单独将接口拆出来放到 用户管理 分组中</span></span></span></span><br><span class="line"><span class="params"><span class="meta">        tags=[<span class="string">&#x27;用户管理&#x27;</span>]</span></span></span><br><span class="line"><span class="params"><span class="meta">    </span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/08/24/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220825162021996.png" alt="image-20220825162021996"></p><h1 id="序列化（嵌套）及验证"><a href="#序列化（嵌套）及验证" class="headerlink" title="序列化（嵌套）及验证"></a>序列化（嵌套）及验证</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singer</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;歌手名称&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Album</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&quot;专辑名称&quot;</span>)</span><br><span class="line"></span><br><span class="line">    singer = models.ForeignKey(to=Singer, related_name=<span class="string">&quot;albums&quot;</span>, on_delete=models.CASCADE, verbose_name=<span class="string">&quot;所属歌手&quot;</span>,</span><br><span class="line">                               null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> api12.models <span class="keyword">import</span> Singer, Album</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlbumSer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Album</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingerSer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 体现反向关联 序列化器嵌套</span></span><br><span class="line">    <span class="comment"># 此处的名称需要与 外键中指定的 related_name=&quot;albums&quot; 一致</span></span><br><span class="line">    albums = AlbumSer(many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Singer</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data: <span class="built_in">dict</span></span>):</span><br><span class="line">        albums_data = validated_data.pop(<span class="string">&quot;albums&quot;</span>)</span><br><span class="line">        singer_obj: Singer = <span class="built_in">super</span>().create(validated_data)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;++++&quot;</span>, albums_data)</span><br><span class="line">        album_objs = [Album.objects.create(**album) <span class="keyword">for</span> album <span class="keyword">in</span> albums_data]</span><br><span class="line">        <span class="comment"># [singer_obj.albums.add(Album.objects.create(**album)) for album in albums]</span></span><br><span class="line">        <span class="comment"># 新版django中，orm多对多外健不再用=等赋值,改为set方法</span></span><br><span class="line">        singer_obj.albums.<span class="built_in">set</span>(album_objs)</span><br><span class="line">        <span class="keyword">return</span> singer_obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_name</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        验证单个数据</span></span><br><span class="line"><span class="string">        :param data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;验证&quot;</span>, data)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, data: OrderedDict</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        同时验证所有数据</span></span><br><span class="line"><span class="string">        :param data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;验证&quot;</span>, data)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> api12.MySerializer <span class="keyword">import</span> SingerSer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request: Request, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(request.data, <span class="built_in">type</span>(request.data))</span><br><span class="line">        ser = SingerSer(data=request.data)</span><br><span class="line">        <span class="built_in">print</span>(ser.initial_data)</span><br><span class="line">        <span class="keyword">if</span> ser.is_valid():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;----&quot;</span>, ser.validated_data)</span><br><span class="line">            ser.save()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;没通过校验&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(ser.errors)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;success&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(data=data)</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/08/24/django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220829173149050.png" alt="image-20220829173149050"></p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>方式一：装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"><span class="meta">    @transaction.atomic   </span><span class="comment"># 导入事务</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">                save_id = transaction.savepoint() <span class="comment"># 记录节点</span></span><br><span class="line">                <span class="keyword">pass</span>  <span class="comment"># 操作内容</span></span><br><span class="line">                transaction.savepoint_commit(save_id) <span class="comment"># 提交从上个节点到现在的改动到数据库</span></span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&quot;OK2&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                transaction.savepoint_rollback(save_id) <span class="comment"># 回到节点</span></span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&quot;错误&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方式二：with语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line"><span class="keyword">with</span> transaction.atomic(): <span class="comment"># 导入事务</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        save_id = transaction.savepoint() <span class="comment"># 记录节点</span></span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># 操作内容</span></span><br><span class="line">        transaction.savepoint_commit(save_id) <span class="comment"># 提交从上个节点到现在的改动到数据库</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;OK2&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        transaction.savepoint_rollback(save_id) <span class="comment"># 回到节点</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;错误&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>官网软件中心</title>
      <link href="/2022/07/26/%E5%AE%98%E7%BD%91%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BF%83/"/>
      <url>/2022/07/26/%E5%AE%98%E7%BD%91%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="安装容器"><a href="#安装容器" class="headerlink" title="安装容器"></a>安装容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --name cpy -p 9000:9000 -v <span class="variable">$&#123;HOME&#125;</span>/share:/root/share python:3.8</span><br><span class="line"></span><br><span class="line">docker run -dit --name cng -p 9001:80  -v <span class="variable">$&#123;HOME&#125;</span>/nginx/www:/usr/share/nginx/html -v <span class="variable">$&#123;HOME&#125;</span>/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v <span class="variable">$&#123;HOME&#125;</span>/nginx/logs:/var/log/nginx nginx:1.15</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="加入同一网络"><a href="#加入同一网络" class="headerlink" title="加入同一网络"></a>加入同一网络</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d bridge mynet</span><br><span class="line"></span><br><span class="line">docker network connect mynet cpy</span><br><span class="line">docker network connect mynet cng</span><br></pre></td></tr></table></figure><h1 id="uwsgi-socket-ini"><a href="#uwsgi-socket-ini" class="headerlink" title="uwsgi-socket.ini"></a>uwsgi-socket.ini</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># 使用nginx反向代理时使用</span></span><br><span class="line">socket = 0.0.0.0:9000</span><br><span class="line"><span class="comment"># 直接作为web服务器使用</span></span><br><span class="line"><span class="comment"># http = 0.0.0.0:8888</span></span><br><span class="line"><span class="comment"># 配置工程目录</span></span><br><span class="line"><span class="built_in">chdir</span> = /root/share/softwarecenter</span><br><span class="line"><span class="comment"># 配置项目的wsgi目录 注意是相对于工程目录</span></span><br><span class="line">wsgi-file = softwarecenter/wsgi.py</span><br><span class="line"><span class="comment"># 指定静态文件路径</span></span><br><span class="line"><span class="comment"># static-map = /static=/root/softwarecenter/statics</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器响应时间 服务器最大的计算时间 到时间就停止计算了 单位：秒</span></span><br><span class="line">harakiri = 3600</span><br><span class="line"><span class="comment"># 前后端连接持续的时间 时间到了就断开连接 单位：秒</span></span><br><span class="line">socket-timeout=3600</span><br><span class="line"><span class="comment">#http-timeout = 3600</span></span><br><span class="line"><span class="comment"># 前后端请求数据的最大值  也就是请求体的最大值 单位：kb</span></span><br><span class="line">buffer-size = 1024000</span><br><span class="line"><span class="comment"># 最大请求连接数</span></span><br><span class="line">max-requests = 1000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置进程线程的信息</span></span><br><span class="line">processes = 4</span><br><span class="line">threads = 2</span><br><span class="line">enable-threads = True</span><br><span class="line">master = True</span><br><span class="line">pidfile = uwsgi.pid</span><br><span class="line">daemonize = uwsgi.log</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="进入cpy容器-安装依赖"><a href="#进入cpy容器-安装依赖" class="headerlink" title="进入cpy容器 安装依赖"></a>进入cpy容器 安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">pip install uwsgi -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure><h1 id="收集项目静态文件"><a href="#收集项目静态文件" class="headerlink" title="收集项目静态文件"></a>收集项目静态文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 配置收集静态文件的目录</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;static_total&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 收集静态文件</span></span><br><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><h1 id="进入cpy容器项目目录下-启动项目"><a href="#进入cpy容器项目目录下-启动项目" class="headerlink" title="进入cpy容器项目目录下 启动项目"></a>进入cpy容器项目目录下 启动项目</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi-socket.ini</span><br></pre></td></tr></table></figure><h1 id="将静态文件夹拷贝到cng的数据卷挂载中"><a href="#将静态文件夹拷贝到cng的数据卷挂载中" class="headerlink" title="将静态文件夹拷贝到cng的数据卷挂载中"></a>将静态文件夹拷贝到cng的数据卷挂载中</h1><blockquote><p>static_total 拷贝到 ${HOME}&#x2F;nginx&#x2F;www</p></blockquote><h1 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">           listen 80;</span><br><span class="line">           server_name localhost;</span><br><span class="line">           client_max_body_size 800m;</span><br><span class="line">           location / &#123;</span><br><span class="line">                    uwsgi_buffering off;</span><br><span class="line"></span><br><span class="line">                    include /etc/nginx/uwsgi_params;</span><br><span class="line">                    uwsgi_pass cpy:9000;</span><br><span class="line"></span><br><span class="line">                    uwsgi_connect_timeout 1800;</span><br><span class="line">                    uwsgi_read_timeout 1800;</span><br><span class="line">                    uwsgi_send_timeout 1800;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            location /static &#123;</span><br><span class="line">                    <span class="built_in">alias</span>  /usr/share/nginx/html/static_total;</span><br><span class="line">                    index  index.html index.htm;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="重启cng容器"><a href="#重启cng容器" class="headerlink" title="重启cng容器"></a>重启cng容器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart cng</span><br></pre></td></tr></table></figure><h1 id="如果不能访问则需要开通云服务器的安全组策略端口"><a href="#如果不能访问则需要开通云服务器的安全组策略端口" class="headerlink" title="如果不能访问则需要开通云服务器的安全组策略端口"></a>如果不能访问则需要开通云服务器的安全组策略端口</h1><h1 id="如果停止了容器-再次启动容器-需要进入cpy容器-手动启一下项目-才能正常访问"><a href="#如果停止了容器-再次启动容器-需要进入cpy容器-手动启一下项目-才能正常访问" class="headerlink" title="如果停止了容器  再次启动容器 需要进入cpy容器 手动启一下项目 才能正常访问"></a>如果停止了容器  再次启动容器 需要进入cpy容器 手动启一下项目 才能正常访问</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi-socket.ini</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jenkins流水线持续集成和持续部署</title>
      <link href="/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="安装gitlab"><a href="#安装gitlab" class="headerlink" title="安装gitlab"></a>安装gitlab</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab-ce:latest</span><br><span class="line"></span><br><span class="line">docker run -dit --name gitlab -p 9980:80 -v <span class="variable">$&#123;HOME&#125;</span>/config:/etc/gitlab -v <span class="variable">$&#123;HOME&#125;</span>/logs:/var/log/gitlab -v <span class="variable">$&#123;HOME&#125;</span>/data:/var/opt/gitlab gitlab-ce:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想设置自启动</span></span><br><span class="line">docker update --restart=always 容器名称</span><br></pre></td></tr></table></figure><h1 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">docker pull jenkins:lts</span><br><span class="line">docker run -d --name jenkins -u root -p 9982:8080 -p 50000:50000 --privileged=<span class="literal">true</span>  -v <span class="variable">$&#123;HOME&#125;</span>/jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkins:lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问页面</span></span><br><span class="line">http://192.168.10.141:9982/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看初始密码</span></span><br><span class="line">docker logs jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考资料</span></span><br><span class="line">https://blog.csdn.net/weixin_44249490/article/details/103687307</span><br></pre></td></tr></table></figure><h1 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装tomcat</span></span><br><span class="line">docker pull tomcat:8</span><br><span class="line">docker run -dit --name tomcat -p 9983:8080 -v <span class="variable">$&#123;HOME&#125;</span>/webapps:/usr/local/tomcat/webapps  tomcat:8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器 复制tomcat manager到webapps目录下</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat bash</span><br><span class="line"><span class="built_in">cp</span> -r webapps.dist/* webapps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 tomcat-users.xml 拷贝到数据卷中 然后到宿主机上改</span></span><br><span class="line"><span class="built_in">cp</span> conf/tomcat-users.xml webapps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在宿主机上修改 tomcat-users.xml</span></span><br><span class="line">&lt;role rolename=<span class="string">&quot;tomcat&quot;</span>/&gt;</span><br><span class="line">&lt;role rolename=<span class="string">&quot;role1&quot;</span>/&gt;</span><br><span class="line">&lt;role rolename=<span class="string">&quot;manager-script&quot;</span>/&gt;</span><br><span class="line">&lt;role rolename=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span><br><span class="line">&lt;role rolename=<span class="string">&quot;manager-status&quot;</span>/&gt;</span><br><span class="line">&lt;role rolename=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span><br><span class="line">&lt;role rolename=<span class="string">&quot;admin-script&quot;</span>/&gt;</span><br><span class="line">&lt;user username=<span class="string">&quot;abel&quot;</span> password=<span class="string">&quot;abel&quot;</span> roles=<span class="string">&quot;manager-gui,manager-script,tomcat,admin-gui,admin-script&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器 将tomcat-users.xml文件拷贝覆盖到conf目录下</span></span><br><span class="line"><span class="built_in">cp</span> webapps/tomcat-users.xml conf/</span><br><span class="line"><span class="comment"># 确认是否覆盖成功</span></span><br><span class="line"><span class="built_in">cat</span> conf/tomcat-users.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释掉 context.xml 中的内容</span></span><br><span class="line"><span class="comment"># webapps/manager/META-INF/context.xml 由于webapps是数据卷 可以在宿主机中直接修改</span></span><br><span class="line">注释掉 &lt;!-- &lt;Value className=.../&gt; --&gt;</span><br><span class="line">具体见下图</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问tomcat页面</span></span><br><span class="line">http://192.168.10.141:9983/</span><br><span class="line"><span class="comment"># 登录管理界面 上传war包进行测试</span></span><br><span class="line">http://192.168.10.141:9983/manager</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/image-20220723234441497.png" alt="image-20220723234441497"></p><p><img src="https://chengyijun.github.io/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/image-20220724002526493.png" alt="image-20220724002526493"></p><h1 id="持续集成持续部署脚本"><a href="#持续集成持续部署脚本" class="headerlink" title="持续集成持续部署脚本"></a>持续集成持续部署脚本</h1><ol><li>流水线项目构建脚本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    def mvnHome</span><br><span class="line">    stage(<span class="string">&#x27;pull code&#x27;</span>) &#123; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;pull code&#x27;</span></span><br><span class="line">        checkout([<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/master&#x27;</span>]], extensions: [], userRemoteConfigs: [[credentialsId: <span class="string">&#x27;58198a85-ab8e-45d5-85ec-d39203edcd48&#x27;</span>, url: <span class="string">&#x27;http://192.168.10.141:9980/cyj/tp06.git&#x27;</span>]]])</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;build code&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;build code&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;/root/apache-maven-3.8.6/bin/mvn clean package&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;develop code&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;develop code&#x27;</span></span><br><span class="line">        deploy adapters: [tomcat8(credentialsId: <span class="string">&#x27;6ab973cd-1221-411d-b722-d9857ec74886&#x27;</span>, path: <span class="string">&#x27;&#x27;</span>, url: <span class="string">&#x27;http://192.168.10.141:9983/&#x27;</span>)], contextPath: <span class="string">&#x27;/myproj&#x27;</span>, war: <span class="string">&#x27;target/*.war&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拉取项目代码"><a href="#拉取项目代码" class="headerlink" title="拉取项目代码"></a>拉取项目代码</h1><p><img src="https://chengyijun.github.io/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/image-20220723233447754.png" alt="image-20220723233447754"></p><h1 id="构建war包"><a href="#构建war包" class="headerlink" title="构建war包"></a>构建war包</h1><p><img src="https://chengyijun.github.io/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/image-20220723233233691.png" alt="image-20220723233233691"></p><h1 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h1><ol><li><p>安装deploy插件</p><p><img src="https://chengyijun.github.io/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/image-20220723231459463.png" alt="image-20220723231459463"></p></li><li><p>关闭跨域限制</p><p><img src="https://chengyijun.github.io/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/image-20220723231612289.png" alt="image-20220723231612289"></p></li></ol><p><img src="https://chengyijun.github.io/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/image-20220723231649919.png" alt="image-20220723231649919"></p><p><img src="https://chengyijun.github.io/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/image-20220723231832809.png" alt="image-20220723231832809"></p><ol start="3"><li><p>生成部署脚本</p><p>war文件所在位置</p><blockquote><p>jenkins任务名&#x2F;target&#x2F;*.war</p></blockquote><p><img src="https://chengyijun.github.io/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/image-20220723232309932.png" alt="image-20220723232309932"></p><p><img src="https://chengyijun.github.io/2022/07/23/jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/image-20220723231939655.png" alt="image-20220723231939655"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SVN服务centos环境下搭建指南</title>
      <link href="/2022/07/15/SVN%E6%9C%8D%E5%8A%A1centos%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
      <url>/2022/07/15/SVN%E6%9C%8D%E5%8A%A1centos%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="SVN服务搭建指南"><a href="#SVN服务搭建指南" class="headerlink" title="SVN服务搭建指南"></a>SVN服务搭建指南</h2><blockquote><p>适用范围：centos7系统 + svn服务端 + 自制svn用户密码修改服务（基于DjangoRestFramework开发）</p></blockquote><h3 id="1-创建根目录存储svn仓库和svn配置"><a href="#1-创建根目录存储svn仓库和svn配置" class="headerlink" title="1. 创建根目录存储svn仓库和svn配置"></a>1. 创建根目录存储svn仓库和svn配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /svn/&#123;svndata,svnpasswd&#125;</span><br></pre></td></tr></table></figure><h3 id="2-启动svn服务"><a href="#2-启动svn服务" class="headerlink" title="2. 启动svn服务"></a>2. 启动svn服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动svn服务</span></span><br><span class="line">**特别注意**：一定要启动所有仓库的根目录 而不能启动某个具体仓库 否则客户端checkout时会报url路径不存在</span><br><span class="line"><span class="comment"># /svn/svndata 是作为所有仓库的根</span></span><br><span class="line">svnserve -d -r /svn/svndata</span><br><span class="line">        参数：</span><br><span class="line">            -d：表示后台运行守护模式；</span><br><span class="line">            -r：表示svn服务的根目录；</span><br><span class="line"></span><br><span class="line">检查svn服务是否启动</span><br><span class="line">ps -ef | grep svnserve</span><br><span class="line">检测svn端口3690是否已经监听：(svn默认启动3690端口)</span><br><span class="line">netstat -lntup | grep 3690</span><br><span class="line"><span class="comment"># 如果提示端口已经占用可以先杀死端口,再初始化仓库</span></span><br><span class="line">pkill svnserve</span><br></pre></td></tr></table></figure><h3 id="3-新建仓库"><a href="#3-新建仓库" class="headerlink" title="3. 新建仓库"></a>3. 新建仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建cbct仓库目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /svn/svndata/cbct</span><br><span class="line"><span class="comment"># 初始化仓库</span></span><br><span class="line">svnadmin create /svn/svndata/cbct</span><br></pre></td></tr></table></figure><h3 id="4-修改配置文件便于统一管理"><a href="#4-修改配置文件便于统一管理" class="headerlink" title="4. 修改配置文件便于统一管理"></a>4. 修改配置文件便于统一管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝 /svn/svndata/cbct/conf 的两个文件 authz passwd 到 /svn/svnpasswd 目录下 便于管理</span></span><br><span class="line"><span class="comment"># 理由是 权限文件和用户文件默认是分散给各个仓库分散管理的  现在需要集中管理</span></span><br><span class="line"><span class="built_in">cp</span> /svn/svndata/cbct/conf/authz /svn/svnpasswd/</span><br><span class="line"><span class="built_in">cp</span> /svn/svndata/cbct/conf/passwd /svn/svnpasswd/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 /svn/svndata/cbct/conf 下的 svnserve.conf 文件 指定集中管理的 authz 和 passwd 文件位置</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要修改的4个地方 且每个仓库的 svnserve.conf 都需要如此配置</span></span><br><span class="line">[general]</span><br><span class="line">anon-access = none</span><br><span class="line">auth-access = write</span><br><span class="line">password-db = /svn/svnpasswd/passwd</span><br><span class="line">authz-db = /svn/svnpasswd/authz</span><br></pre></td></tr></table></figure><h3 id="5-配置用户、组、仓库的关系"><a href="#5-配置用户、组、仓库的关系" class="headerlink" title="5. 配置用户、组、仓库的关系"></a>5. 配置用户、组、仓库的关系</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">vim /svn/svnpasswd/passwd</span><br><span class="line"><span class="comment"># 按照 用户名 = 密码 的格式追加即可 如下图所示</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/609cb81f27fb43bdb0dc88a50af5f07d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Li_5Li_6ZW_6KGr572p5a2Q6b6Z,size_14,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建组</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aa33463a4aaa43c7990ce537c70137d0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Li_5Li_6ZW_6KGr572p5a2Q6b6Z,size_18,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 组&lt;--&gt;用户 的关系</span></span><br><span class="line"><span class="comment"># 组名 = 用户名1,用户名2,用户名3</span></span><br><span class="line">[<span class="built_in">groups</span>]</span><br><span class="line">group_cbct = chengyijun,xiangyang</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 组&lt;--&gt;仓库 的关系</span></span><br><span class="line"><span class="comment"># [仓库名:/] 表示对 该仓库下的根目录设置权限</span></span><br><span class="line"><span class="comment"># 特别注意：引用组名前面需要带@符号</span></span><br><span class="line"><span class="comment"># 注意仓库下的权限不仅可以绑定组 也可以直接绑定用户</span></span><br><span class="line"><span class="comment"># r表示可读 w表示可写  rw可读写</span></span><br><span class="line">[cbct:/]</span><br><span class="line">@group_cbct = rw</span><br><span class="line">zhangbin = rw</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启svn服务 进行snv访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止svn服务</span></span><br><span class="line">pkill svnserve</span><br><span class="line"><span class="comment"># 开启svn服务 切记需要指定所有仓库的根 而不是具体仓库</span></span><br><span class="line">svnserve -d -r /svn/svndata</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端的svn填入地址为</span></span><br><span class="line">svn://39.103.186.2/cbct</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8485a25a9e3c4335a1ba9f3b6cb7253c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Li_5Li_6ZW_6KGr572p5a2Q6b6Z,size_12,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h3 id="6-配置修改密码的web服务"><a href="#6-配置修改密码的web服务" class="headerlink" title="6. 配置修改密码的web服务"></a>6. 配置修改密码的web服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为了防止修改密码的web服务没有操作 passwd 文件的权限 先进行提权</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 777 /svn/svnpasswd/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在修改密码的web服务中 指定 passwd 文件所在目录的位置 注意是目录位置 不是文件的全路径</span></span><br><span class="line"><span class="comment"># 进入密码修改服务项目中 指定要操作的svn passwd文件位置</span></span><br><span class="line">vim /root/svntest/backend/backend/settings.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-YdonSDyF-1630997778850)(C:\Users\abel\Desktop\SVN服务搭建.assets\1630993118140.png)]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在djangorestframework项目中启动 修改密码的服务</span></span><br><span class="line"><span class="comment"># 后台启动服务</span></span><br><span class="line"><span class="comment"># nohup 表示不挂起</span></span><br><span class="line"><span class="comment"># -u 参数的作用是取消python stdout的缓存 使其有结果就实时的网mylog文件中写</span></span><br><span class="line"><span class="comment"># 2&gt;&amp;1 表示错误也重定向到 mylog 文件中</span></span><br><span class="line"><span class="comment"># &amp; 表示后台执行</span></span><br><span class="line"><span class="built_in">nohup</span> python3 -u manage.py runserver 0.0.0.0:8000 &gt; mylog 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务运行情况 看mylog文件</span></span><br><span class="line"><span class="built_in">cat</span> mylog</span><br><span class="line">或者 <span class="built_in">tail</span> -f mylog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要停止服务可以进行如下操作</span></span><br><span class="line"><span class="comment"># 查询进程号</span></span><br><span class="line">ps -ef|grep python3</span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> 进程号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开浏览器访问就可以修改各个用户的密码</span></span><br><span class="line"><span class="comment"># 旧的密码为创建用户时指定的密码</span></span><br><span class="line">浏览器访问  http://39.103.186.2:8000/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3854db649c4b4928b40dc0e4be6a6f81.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Li_5Li_6ZW_6KGr572p5a2Q6b6Z,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>scrapy笔记</title>
      <link href="/2022/07/15/scrapy%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/15/scrapy%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="scrapy笔记"><a href="#scrapy笔记" class="headerlink" title="scrapy笔记"></a>scrapy笔记</h1><h2 id="1-添加随机UserAgent"><a href="#1-添加随机UserAgent" class="headerlink" title="1. 添加随机UserAgent"></a>1. 添加随机UserAgent</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_user_agent</span>(<span class="params">path</span>):</span><br><span class="line">    res = UserAgent(path=path).random</span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fictiondemo.utils <span class="keyword">import</span> get_random_user_agent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RandomUserAgentMiddleware</span>:</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="comment"># This method is used by Scrapy to create your spiders.</span></span><br><span class="line">        s = cls()</span><br><span class="line">        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        random_user_agent = get_random_user_agent(path=<span class="string">&#x27;config/fake_useragent.json&#x27;</span>)</span><br><span class="line">        request.headers[<span class="string">&#x27;User-Agent&#x27;</span>] = random_user_agent</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spider_opened</span>(<span class="params">self, spider</span>):</span><br><span class="line">        spider.logger.info(<span class="string">&#x27;Spider opened: %s&#x27;</span> % spider.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="comment"># None表示禁用</span></span><br><span class="line">    <span class="string">&#x27;fictiondemo.middlewares.FictiondemoDownloaderMiddleware&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;fictiondemo.middlewares.RandomUserAgentMiddleware&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-crawlspider实例"><a href="#2-crawlspider实例" class="headerlink" title="2. crawlspider实例"></a>2. crawlspider实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TxbcSpider</span>(<span class="title class_ inherited__">CrawlSpider</span>):</span><br><span class="line">    name = <span class="string">&#x27;txbc&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;tianxiabachang.zuopinj.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://tianxiabachang.zuopinj.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        <span class="comment"># \d&#123;3,5&#125; 表示3~5（不含5）个数字  也就是一个前闭后开区间</span></span><br><span class="line">        <span class="comment"># callback 指定是否需要回调函数来处理本次的响应</span></span><br><span class="line">        <span class="comment"># follow=True 拿到本次提取到的链接 继续发请求 如果有callback就将请求得到的响应放到callback函数中</span></span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;/\d&#123;3,5&#125;/$&#x27;</span>), follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r&#x27;/\d+\.html$&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_item</span>(<span class="params">self, response: HtmlResponse</span>):</span><br><span class="line">        item = &#123;&#125;</span><br><span class="line">        <span class="comment"># http://tianxiabachang.zuopinj.com/11350/299356.html</span></span><br><span class="line">        url = response.url</span><br><span class="line">        res = re.findall(<span class="string">r&#x27;http://tianxiabachang.zuopinj.com/(.*?)/(.*?).html&#x27;</span>, url)[<span class="number">0</span>]</span><br><span class="line">        book_id = res[<span class="number">0</span>]</span><br><span class="line">        chapter_id = res[<span class="number">1</span>]</span><br><span class="line">        title = response.xpath(<span class="string">&#x27;//h1/text()&#x27;</span>).get(<span class="literal">None</span>)</span><br><span class="line">        ps = response.xpath(<span class="string">&#x27;//*[@id=&quot;htmlContent&quot;]//p&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> index, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(ps, start=<span class="number">1</span>):</span><br><span class="line">            content = p.xpath(<span class="string">&#x27;.//text()&#x27;</span>).get(<span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>([content <span class="keyword">is</span> <span class="literal">None</span>, content == <span class="string">&#x27;\xa0\xa0&#x27;</span>]):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># print(book_id, chapter_id, index, title, res)</span></span><br><span class="line">            item.setdefault(<span class="string">&#x27;book_id&#x27;</span>, book_id)</span><br><span class="line">            item.setdefault(<span class="string">&#x27;chapter_id&#x27;</span>, chapter_id)</span><br><span class="line">            item.setdefault(<span class="string">&#x27;index&#x27;</span>, index)</span><br><span class="line">            item.setdefault(<span class="string">&#x27;title&#x27;</span>, title)</span><br><span class="line">            item.setdefault(<span class="string">&#x27;content&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jenkins搭建</title>
      <link href="/2022/07/15/jenkins%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/07/15/jenkins%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins配置教程"><a href="#Jenkins配置教程" class="headerlink" title="Jenkins配置教程"></a>Jenkins配置教程</h1><h2 id="centos7"><a href="#centos7" class="headerlink" title="centos7"></a>centos7</h2><ul><li><p>关闭selinux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure><p> 将SELINUX&#x3D;enforcing改为SELINUX&#x3D;disabled 设置后需要重启才能生效</p></li><li><p>关闭防火墙并禁止自动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl status firewalld </span><br></pre></td></tr></table></figure></li><li><p>换源</p></li><li><p>配置静态ip</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.130.130</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.130.1</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">NAME=ens34</span><br><span class="line">DEVICE=ens34</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure><h2 id="gitlab服务器"><a href="#gitlab服务器" class="headerlink" title="gitlab服务器"></a>gitlab服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install -y curl policycoreutils-python openssh-server openssh-clients postfix</span><br><span class="line"><span class="comment"># 配置sshd</span></span><br><span class="line">systemctl <span class="built_in">enable</span> sshd &amp;&amp; systemctl start sshd</span><br><span class="line"><span class="comment"># 配置邮件服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> postfix &amp;&amp; systemctl start postfix</span><br><span class="line"><span class="comment"># 下载gitlab</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/gitlab-ce-12.4.2-ce.0.el6.x86_64.rpm</span><br><span class="line"><span class="comment"># 安装gitlab</span></span><br><span class="line">rpm -ivh gitlab-ce-12.4.2-ce.0.el6.x86_64.rpm</span><br><span class="line"><span class="comment"># 配置gitlab</span></span><br><span class="line">vi /etc/gitlab/gitlab.rb</span><br><span class="line">external_url <span class="string">&#x27;http://192.168.130.131:82&#x27;</span></span><br><span class="line">nginx[<span class="string">&#x27;listen_port&#x27;</span>] = 82</span><br><span class="line"><span class="comment"># 让配置生效</span></span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitlab 首次访问会让修改密码(密码要求8位)</span></span><br><span class="line">root/00000000</span><br></pre></td></tr></table></figure><h2 id="jenkins服务器"><a href="#jenkins服务器" class="headerlink" title="jenkins服务器"></a>jenkins服务器</h2><p>安装jdk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk* -y</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2.安装</span><br><span class="line">[root@ticent admin]# yum install java-1.8.0-openjdk.x86_64</span><br><span class="line">3.添加环境变量 vi /etc/profile</span><br><span class="line">JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.282.b08-1.el7_9.x86_64</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br><span class="line">4.验证有效性</span><br><span class="line">[root@ticent admin]# java -version</span><br><span class="line">openjdk version &quot;1.8.0_131&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_131-b12)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.131-b12, mixed mode)</span><br></pre></td></tr></table></figure><p>下载jenkins</p><p>wget …</p><p>上传jenkins</p><p>yum install lrzsz -y</p><p>rz …</p><p>安装jenkins</p><p>rpm -ivh …</p><p>配置jenkis</p><p>vim &#x2F;etc&#x2F;sysconfig&#x2F;jenkins</p><p>JENKINS_USER&#x3D;”root”</p><p>JENKINS_PORT&#x3D;”8888”</p><p>启动jenkins</p><p>systemctl start jenkins</p><p>访问jenkins</p><p><a href="http://192.168.130.132:8888/">http://192.168.130.132:8888/</a></p><p>首次访问会要求填写初始密码</p><p>cat &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword</p><p>创建用户如下：</p><p>abel&#x2F;000000</p><h2 id="测试环境服务器"><a href="#测试环境服务器" class="headerlink" title="测试环境服务器"></a>测试环境服务器</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>drf分页实例</title>
      <link href="/2022/07/15/drf%E5%88%86%E9%A1%B5%E5%AE%9E%E4%BE%8B/"/>
      <url>/2022/07/15/drf%E5%88%86%E9%A1%B5%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Students  <span class="comment"># 设置关联模型     model就是关联模型</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span>  <span class="comment"># fields设置字段   __all__表示所有字段</span></span><br><span class="line">        <span class="comment"># fields = [&#x27;content&#x27;, &#x27;location&#x27;]</span></span><br><span class="line">        <span class="comment"># 排除的字段  直接丢弃  不验证 不入库</span></span><br><span class="line">        <span class="comment"># exclude = [&#x27;topic&#x27;, &#x27;user&#x27;]</span></span><br><span class="line">        <span class="comment"># exclude = []</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPageNumberPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    <span class="comment"># 每页默认获取的条数 size=10</span></span><br><span class="line">    page_size = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 指定当前获取条数</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;size&#x27;</span></span><br><span class="line">    <span class="comment"># 指定当前页数</span></span><br><span class="line">    page_query_param = <span class="string">&quot;page&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request: Request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取所有</span></span><br><span class="line">        students = Students.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 创建分页对象</span></span><br><span class="line">        pg = MyPageNumberPagination()</span><br><span class="line">        <span class="comment"># 获取分页的数据</span></span><br><span class="line">        page_roles = pg.paginate_queryset(queryset=students, request=request, view=self)</span><br><span class="line">        <span class="comment"># 对数据进行序列化</span></span><br><span class="line">        ser = StudentSerializers(instance=page_roles, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>drf的认证-权限节流-版本-控制实例</title>
      <link href="/2022/07/15/drf%E7%9A%84%E8%AE%A4%E8%AF%81-%E6%9D%83%E9%99%90%E8%8A%82%E6%B5%81-%E7%89%88%E6%9C%AC-%E6%8E%A7%E5%88%B6%E5%AE%9E%E4%BE%8B/"/>
      <url>/2022/07/15/drf%E7%9A%84%E8%AE%A4%E8%AF%81-%E6%9D%83%E9%99%90%E8%8A%82%E6%B5%81-%E7%89%88%E6%9C%AC-%E6%8E%A7%E5%88%B6%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> BaseThrottle, SimpleRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> BaseVersioning</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line">visit_records = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyBaseVersioning</span>(<span class="title class_ inherited__">BaseVersioning</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    版本控制</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    versions = [<span class="string">&#x27;v1&#x27;</span>, <span class="string">&#x27;v2&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">determine_version</span>(<span class="params">self, request: Request, *args, **kwargs</span>):</span><br><span class="line">        version = request.query_params.get(<span class="string">&#x27;version&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> version <span class="keyword">not</span> <span class="keyword">in</span> self.versions:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.APIException(detail=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;版本不正确&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyScopedRateThrottle</span>(<span class="title class_ inherited__">SimpleRateThrottle</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    节流控制（继承自drf框架实现）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    scope = <span class="string">&#x27;visit&#x27;</span></span><br><span class="line">    THROTTLE_RATES = &#123;</span><br><span class="line">        <span class="string">&#x27;visit&#x27;</span>: <span class="string">&#x27;6/m&#x27;</span>,  <span class="comment"># 每分钟访问6次</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cache_key</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="keyword">return</span> request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThrottle</span>(<span class="title class_ inherited__">BaseThrottle</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    节流控制（自定义）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_request</span>(<span class="params">self, request: Request, view</span>):</span><br><span class="line">        <span class="comment"># 拿到访问的IP</span></span><br><span class="line">        ip = request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>)</span><br><span class="line">        <span class="comment"># 访问记录</span></span><br><span class="line">        <span class="comment"># &#123;ip: [timestamp1, timestamp2]&#125;</span></span><br><span class="line">        now = time.time()</span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> visit_records.keys():</span><br><span class="line">            <span class="comment"># 如果是第一次访问就将ip加入到访问记录中</span></span><br><span class="line">            visit_records.setdefault(ip, [now])</span><br><span class="line">        <span class="comment"># 获取该ip的访问记录</span></span><br><span class="line">        history = visit_records.get(ip)</span><br><span class="line">        <span class="comment"># 如果记录中最先一次的访问时间 超出频率 则移除</span></span><br><span class="line">        <span class="keyword">if</span> now - history[-<span class="number">1</span>] &gt; <span class="number">10.0</span>:</span><br><span class="line">            <span class="comment"># 移除过期的访问记录</span></span><br><span class="line">            history.pop()</span><br><span class="line">        <span class="comment"># 判断是否可以访问</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(history) &lt; <span class="number">5</span>:</span><br><span class="line">            <span class="comment"># 更新该ip的访问时间记录</span></span><br><span class="line">            visit_records.get(ip).insert(<span class="number">0</span>, now)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPermission</span>(<span class="title class_ inherited__">BasePermission</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    权限控制</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_permission</span>(<span class="params">self, request, view</span>):</span><br><span class="line">        <span class="comment"># 抛出异常或者返回False 表示没有权限</span></span><br><span class="line">        <span class="comment"># raise exceptions.PermissionDenied(detail=&#123;&#x27;msg&#x27;: &#x27;没有权限哦&#x27;&#125;)</span></span><br><span class="line">        <span class="comment"># return False</span></span><br><span class="line">        <span class="comment"># 返回True 表示有权限</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAuthentication</span>(<span class="title class_ inherited__">BaseAuthentication</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    认证控制</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request: Request</span>):</span><br><span class="line">        token = request.query_params.<span class="built_in">dict</span>().get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="comment"># 第一种结果： 抛出异常，认证失败，并终止向后认证</span></span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(detail=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;认证失败&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> token == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="comment"># 第二种结果： 返回tuple，认证成功，并终止向后认证</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;abel&#x27;</span>, token</span><br><span class="line">        <span class="comment"># 第三种结果： 返回None，不进行任何认证，继续向后认证</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 配置认证控制类</span></span><br><span class="line">    authentication_classes = [MyAuthentication]</span><br><span class="line">    <span class="comment"># 配置权限控制类</span></span><br><span class="line">    permission_classes = [MyPermission]</span><br><span class="line">    <span class="comment"># 配置节流控制类</span></span><br><span class="line">    throttle_classes = [MyScopedRateThrottle]</span><br><span class="line">    <span class="comment"># 配置版本控制类  注意此处是单个的类 而不是列表</span></span><br><span class="line">    versioning_class = MyBaseVersioning</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, requests, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(requests)</span><br><span class="line">        data = <span class="built_in">dict</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="string">&#x27;abcd&#x27;</span>, <span class="built_in">range</span>(<span class="number">4</span>))))</span><br><span class="line">        <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, requests, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(requests)</span><br><span class="line">        <span class="built_in">print</span>(requests.FILES)</span><br><span class="line">        file = requests.FILES.<span class="built_in">dict</span>().get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> chuck <span class="keyword">in</span> file.chunks():</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;aaa.png&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(chuck)</span><br><span class="line"></span><br><span class="line">        data = <span class="built_in">dict</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="string">&#x27;efgh&#x27;</span>, <span class="built_in">range</span>(<span class="number">4</span>))))</span><br><span class="line">        <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自封装的python38-dockerfile</title>
      <link href="/2022/07/15/%E8%87%AA%E5%B0%81%E8%A3%85%E7%9A%84python38-dockerfile/"/>
      <url>/2022/07/15/%E8%87%AA%E5%B0%81%E8%A3%85%E7%9A%84python38-dockerfile/</url>
      
        <content type="html"><![CDATA[<h1 id="自己封装的py38环境"><a href="#自己封装的py38环境" class="headerlink" title="自己封装的py38环境"></a>自己封装的py38环境</h1><blockquote><p>Dockfile编写</p></blockquote><blockquote><p>添加启动脚本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /var/lib/boot2docker/bootlocal.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动挂在共享文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/vmshare/</span><br><span class="line">sudo mount -t vboxsf vmshare ~/vmshare/</span><br><span class="line"><span class="comment">#更改时区、时间（/mnt/sda1/localtime是从别的服务器cp过阿里的/usr/share/zoneinfo/Asia/Shanghai）</span></span><br><span class="line"><span class="built_in">cp</span> -f /mnt/sda1/localtime /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone;</span><br><span class="line"><span class="comment">#Docker 中国官方镜像加速</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&#123;\&quot;registry-mirrors\&quot;: [\&quot;https://registry.docker-cn.com\&quot;]&#125;&quot;</span> &gt; /etc/docker/daemon.json;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM wynemo/python38</span><br><span class="line">RUN <span class="built_in">cd</span> /root \</span><br><span class="line">    &amp;&amp; <span class="built_in">mkdir</span> .pip \</span><br><span class="line">    &amp;&amp; <span class="built_in">mkdir</span> .venvs \</span><br><span class="line">    <span class="comment"># 安装virtualenvwrapper</span></span><br><span class="line">    &amp;&amp; pip install virtualenvwrapper \</span><br><span class="line">    <span class="comment"># 修改pip源</span></span><br><span class="line">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;[global] \n index-url = http://mirrors.aliyun.com/pypi/simple/ \n [install] \n trusted-host = mirrors.aliyun.com \n&quot;</span> &gt; .pip/pip.conf \</span><br><span class="line">    <span class="comment"># 修复virtualenv</span></span><br><span class="line">    &amp;&amp; pip install --upgrade virtualenv==16.7.9 \</span><br><span class="line">    <span class="comment"># 配置.bashrc文件</span></span><br><span class="line">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;WORKON_HOME=~/.venvs \n VIRTUALENVWRAPPER_VIRTUALENV_ARGS=&#x27;--no-site-packages&#x27; \n VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python \n export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv \n source /usr/local/bin/virtualenvwrapper.sh \n&quot;</span> &gt;&gt; .bashrc \</span><br><span class="line">    <span class="comment"># 使配置文件生效</span></span><br><span class="line">    &amp;&amp; /bin/bash -c <span class="string">&quot;source .bashrc&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>根据Dockfile生成镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mypy38env:v5 .</span><br></pre></td></tr></table></figure><blockquote><p>删除所有已经关闭的容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> `docker ps -a|grep Exited|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vbox共享文件夹设置</title>
      <link href="/2022/07/15/vbox%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/07/15/vbox%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="vbox共享文件夹设置"><a href="#vbox共享文件夹设置" class="headerlink" title="vbox共享文件夹设置"></a>vbox共享文件夹设置</h1><p><img src="https://img-blog.csdnimg.cn/20201209181839978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t vboxsf vmshare ~/vmshare/ </span><br></pre></td></tr></table></figure><blockquote><p><em>注意</em>   vboxsf 是vbox文件格式</p><p>vmshare是前面设置的共享文件夹的名称</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令</title>
      <link href="/2022/07/15/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/07/15/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><p>镜像加速</p><p>对于使用 systemd 的系统，请在 &#x2F;etc&#x2F;docker&#x2F;daemon.json 中写入如下内容（如果文件不存在请新建该文件）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后重新启动服务：</p><p>$ <strong>sudo</strong> systemctl daemon-reload<br>$ <strong>sudo</strong> systemctl restart docker</p><p>启动docker服务</p><blockquote><p>systemctl start docker</p></blockquote><p>查找镜像</p><blockquote><p>docker search 镜像名</p></blockquote><p>下载镜像</p><blockquote><p>docker pull 镜像名</p></blockquote><p>查询已下载的镜像</p><blockquote><p>docker images</p></blockquote><p>删除镜像</p><blockquote><p>docker rmi 镜像id</p></blockquote><p>启动容器</p><blockquote><p>docker run –name centos-test -dit centos:latest</p></blockquote><p>停止容器</p><blockquote><p>docker start 容器名&#x2F;容器id</p></blockquote><p>删除容器</p><blockquote><p>docker rm 容器名&#x2F;容器id</p></blockquote><p>查看容器</p><blockquote><p>docker ps -a</p></blockquote><p>进入容器</p><blockquote><p>docker exec -it 容器名 &#x2F;bin&#x2F;bash</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python+appium测试移动端app流程</title>
      <link href="/2022/07/15/python-appium%E6%B5%8B%E8%AF%95%E7%A7%BB%E5%8A%A8%E7%AB%AFapp%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/07/15/python-appium%E6%B5%8B%E8%AF%95%E7%A7%BB%E5%8A%A8%E7%AB%AFapp%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载android-sdk"><a href="#1-下载android-sdk" class="headerlink" title="1. 下载android sdk"></a>1. 下载android sdk</h3><p><img src="https://img-blog.csdnimg.cn/20201207152502681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-配置-android-sdk"><a href="#2-配置-android-sdk" class="headerlink" title="2. 配置 android sdk"></a>2. 配置 android sdk</h3><ol><li>配置 ANDROID_HOME和Path</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ANDROID_HOME</span><br><span class="line">D:\Program Files (x86)\Android\android-sdk</span><br><span class="line"></span><br><span class="line">Path</span><br><span class="line">%ANDROID_HOME%</span><br><span class="line">%ANDROID_HOME%\tools</span><br><span class="line">%ANDROID_HOME%\platform-tools</span><br><span class="line">%ANDROID_HOME%\build-tools</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>配置Path</p><p>​    <img src="https://img-blog.csdnimg.cn/20190308171511267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjc5OTY0,size_16,color_FFFFFF,t_70" alt="img"></p></li></ol><h3 id="3-安装模拟器"><a href="#3-安装模拟器" class="headerlink" title="3. 安装模拟器"></a>3. 安装模拟器</h3><ul><li>自行下载安装android模拟器即可 （此处安装的是 夜神模拟器）</li><li><em>注意</em> 为了版本一致性 防止出错 可以将android sdk根目录\platform-tools\adb.exe 复制一份出来并改名nox_adb.exe 覆盖到夜神模拟器根目录</li><li><img src="https://img-blog.csdnimg.cn/20201207155821625.png" alt="在这里插入图片描述"></li></ul><p><img src="https://img-blog.csdnimg.cn/20201207152554623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-通过adb连接模拟器"><a href="#4-通过adb连接模拟器" class="headerlink" title="4. 通过adb连接模拟器"></a>4. 通过adb连接模拟器</h3><ol><li>通过adb查询一下连接的设备列表</li></ol><p> <img src="https://img-blog.csdnimg.cn/20201207152628161.png" alt="在这里插入图片描述"></p><ol start="2"><li>手动连接一下模拟器 <em>注意</em> 不同的模拟器 端口可能不一样 夜神模拟器是62001 其他的可以查询</li></ol><p><img src="https://img-blog.csdnimg.cn/20201207152634230.png" alt="在这里插入图片描述"></p><h3 id="5-配置appium"><a href="#5-配置appium" class="headerlink" title="5. 配置appium"></a>5. 配置appium</h3><ol><li><p>四项基本配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;deviceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1:62001&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;platformName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Android&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;appPackage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.bignox.google.installer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;appActivity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.MainActivity&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>上述第3项 第4项 可以通过如下指令查询到  <em>前提</em>是在模拟器上将待测软件打开到启动界面<blockquote><p>以下命令可以获取当前启动状态的app的 包名和activity名</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">dumpsys activity | grep <span class="string">&quot;mFoc&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>配置好四项基本配置之后，可以开启会话 appium就得到了模拟器的图像</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20201207152835363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="6-安装-appium-python-client"><a href="#6-安装-appium-python-client" class="headerlink" title="6. 安装 appium-python-client"></a>6. 安装 appium-python-client</h3><blockquote><p>此模块用来安装appium 像selenium一样通过python来操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install appium-python-client</span><br></pre></td></tr></table></figure><h3 id="7-通过元素id进行定位"><a href="#7-通过元素id进行定位" class="headerlink" title="7. 通过元素id进行定位"></a>7. 通过元素id进行定位</h3><ul><li>可以借助android sdk目录下的</li></ul><p><img src="https://img-blog.csdnimg.cn/20201207152805176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201207152812418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="8-python代码示例"><a href="#8-python代码示例" class="headerlink" title="8. python代码示例"></a>8. python代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@author: chengyijun</span></span><br><span class="line"><span class="string">@contact: cyjmmy@foxmail.com</span></span><br><span class="line"><span class="string">@file: test1.py</span></span><br><span class="line"><span class="string">@time: 2020/12/7 15:06</span></span><br><span class="line"><span class="string">@desc:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">    caps = &#123;&#125;</span><br><span class="line">    <span class="comment"># 平台名称 Android or Ios</span></span><br><span class="line">    caps[<span class="string">&quot;platformName&quot;</span>] = <span class="string">&quot;Android&quot;</span></span><br><span class="line">    <span class="comment"># 包名</span></span><br><span class="line">    caps[<span class="string">&quot;appPackage&quot;</span>] = <span class="string">&quot;com.bignox.google.installer&quot;</span></span><br><span class="line">    <span class="comment"># activity名</span></span><br><span class="line">    caps[<span class="string">&quot;appActivity&quot;</span>] = <span class="string">&quot;.MainActivity&quot;</span></span><br><span class="line">    <span class="comment"># 键盘输入设置 （不是必须的）</span></span><br><span class="line">    caps[<span class="string">&quot;resetKeyboard&quot;</span>] = <span class="literal">True</span></span><br><span class="line">    caps[<span class="string">&quot;unicodeKeyboard&quot;</span>] = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 连接appium服务器 路径&#x27;/wd/hub&#x27;是固定的</span></span><br><span class="line">    driver = webdriver.Remote(<span class="string">&quot;http://localhost:4723/wd/hub&quot;</span>, caps)</span><br><span class="line">    <span class="comment"># 通过元素id定位 并操作点击</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;com.bignox.google.installer:id/install&#x27;</span>).click()</span><br><span class="line">    <span class="comment"># 退出driver</span></span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>stacked组件和tab组件的使用</title>
      <link href="/2022/07/15/stacked%E7%BB%84%E4%BB%B6%E5%92%8Ctab%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/15/stacked%E7%BB%84%E4%BB%B6%E5%92%8Ctab%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author  : chengyijun</span></span><br><span class="line"><span class="comment"># @Time    : 2020/9/17 15:21</span></span><br><span class="line"><span class="comment"># @File    : stacked_demo.py</span></span><br><span class="line"><span class="comment"># @desc    : pyqt5 stacked组件和tab组件的使用</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> pyqtSlot</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QWidget, QLabel</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> login <span class="keyword">import</span> Ui_Form <span class="keyword">as</span> Ui_Login</span><br><span class="line"><span class="keyword">from</span> tab <span class="keyword">import</span> Ui_Form <span class="keyword">as</span> Ui_Tab</span><br><span class="line"><span class="keyword">from</span> stacked <span class="keyword">import</span> Ui_MainWindow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tab</span>(Ui_Tab, QWidget):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">super</span>().__init__(parent=parent)</span><br><span class="line">        self.setupUi(self)</span><br><span class="line"></span><br><span class="line">        q_label = QLabel(text=<span class="string">&quot;我是tab的内容&quot;</span>)</span><br><span class="line">        self.tabWidget.addTab(q_label, <span class="string">&quot;tab3&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span>(Ui_Login, QWidget):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">super</span>().__init__(parent=parent)</span><br><span class="line">        self.setupUi(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(Ui_MainWindow, QMainWindow):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.setupUi(self)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_pushButton_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># self.stackedWidget.setCurrentIndex(0)</span></span><br><span class="line">        login = Login()</span><br><span class="line">        self.stackedWidget.insertWidget(<span class="number">0</span>, login)</span><br><span class="line">        self.stackedWidget.setCurrentIndex(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_pushButton_2_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        tab = Tab()</span><br><span class="line">        self.stackedWidget.insertWidget(<span class="number">1</span>, tab)</span><br><span class="line">        self.stackedWidget.setCurrentIndex(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_pushButton_3_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;gwc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Demo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用drf框架编写api</title>
      <link href="/2022/07/15/%E4%BD%BF%E7%94%A8drf%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99api/"/>
      <url>/2022/07/15/%E4%BD%BF%E7%94%A8drf%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99api/</url>
      
        <content type="html"><![CDATA[<h1 id="安装djangorestframework"><a href="#安装djangorestframework" class="headerlink" title="安装djangorestframework"></a>安装djangorestframework</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure><h1 id="修改常用配置"><a href="#修改常用配置" class="headerlink" title="修改常用配置"></a>修改常用配置</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;api&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;abel&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;abel&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;POST&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;你的app名称&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">USE_TZ = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>项目的同名目录下的 <del><strong>init</strong>.py</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h1 id="url-路由分发"><a href="#url-路由分发" class="headerlink" title="url 路由分发"></a>url 路由分发</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;api/&#x27;</span>, include(<span class="string">&quot;api.urls&quot;</span>, namespace=<span class="string">&#x27;api&#x27;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;api&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, views.LoginView.as_view(), name=<span class="string">&#x27;login&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;code/&#x27;</span>, views.CodeView.as_view(), name=<span class="string">&#x27;code&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;tempauth/&#x27;</span>, views.TempAuthView.as_view(), name=<span class="string">&#x27;tempauth&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># APIView</span></span><br><span class="line">    path(<span class="string">&#x27;articles/&#x27;</span>, views.ArticleView.as_view(), name=<span class="string">&#x27;articles&#x27;</span>),</span><br><span class="line">    re_path(<span class="string">r&#x27;article/(?P&lt;id&gt;\d+)/$&#x27;</span>, views.ArticleDetailView.as_view(), name=<span class="string">&#x27;article-detail&#x27;</span>),</span><br><span class="line">    <span class="comment"># 等价于上面的写法 建议使用上面一种 便于理解</span></span><br><span class="line">    <span class="comment"># path(&#x27;article/&lt;id&gt;/&#x27;, views.ArticleDetailView.as_view(), name=&#x27;article-detail&#x27;),</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="view-编写"><a href="#view-编写" class="headerlink" title="view 编写"></a>view 编写</h1><ul><li><p>为了方便复用，尽量使用 ListAPIView, CreateAPIView, （此二者可以合并为 ListCreateAPIView）</p></li><li><p>RetrieveAPIView, UpdateAPIView, DestroyAPIView</p></li><li><p>按照上面编写的路由规则  访问url形式为：</p></li><li><p>&#96;&#96;&#96;<br><a href="http://127.0.0.1:8000/api/articles/">http://127.0.0.1:8000/api/articles/</a><br><a href="http://127.0.0.1:8000/api/article/78/">http://127.0.0.1:8000/api/article/78/</a> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```python</span><br><span class="line">class ArticleView(CreateAPIView, ListAPIView):</span><br><span class="line">    # 查询结果集</span><br><span class="line">    queryset = Articles.objects.all()</span><br><span class="line">    # 序列化器类</span><br><span class="line">    # serializer_class = ArticleSerializer</span><br><span class="line">    # 自定义分页器</span><br><span class="line">    pagination_class = MyPageNumberPagination</span><br><span class="line">    # 自定义queryset结果集</span><br><span class="line">    filter_backends = [ArticleFilter]</span><br><span class="line"></span><br><span class="line">    def get_serializer_class(self):</span><br><span class="line">        # 根据不同请求 加载不同的序列化器</span><br><span class="line">        if self.request.method == &#x27;POST&#x27;:</span><br><span class="line">            return ArticleSerializer</span><br><span class="line">        elif self.request.method == &#x27;GET&#x27;:</span><br><span class="line">            return ArticleSerializerForList</span><br><span class="line"></span><br><span class="line">    # 钩子 重写该方法可以在 序列化完成 数据入库之前的时机  插入其他字段值</span><br><span class="line">    def perform_create(self, serializer):</span><br><span class="line">        print(serializer.initial_data)</span><br><span class="line">        userinfo_id = serializer.initial_data.get(&#x27;user&#x27;)</span><br><span class="line">        topic_id = serializer.initial_data.get(&#x27;topic&#x27;)</span><br><span class="line">        # serializer.save() 方法的内部 又调用了 序列化器中的 create()方法</span><br><span class="line">        article_obj = serializer.save(topic_id=topic_id, user_id=userinfo_id)</span><br><span class="line">        return article_obj</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleDetailView</span>(RetrieveAPIView, UpdateAPIView, DestroyAPIView):</span><br><span class="line">    <span class="comment"># 查询结果集</span></span><br><span class="line">    queryset = Articles.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 序列化器类</span></span><br><span class="line">    serializer_class = ArticleSerializerForList</span><br><span class="line">    <span class="comment"># django 默认的主键形参为pk 如果改用其他 应通过 lookup_field 显试指定出来</span></span><br><span class="line">    lookup_field = <span class="string">&#x27;id&#x27;</span></span><br></pre></td></tr></table></figure><p>分页器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> LimitOffsetPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPageNumberPagination</span>(<span class="title class_ inherited__">LimitOffsetPagination</span>):</span><br><span class="line">    <span class="comment"># 默认数据量</span></span><br><span class="line">    default_limit = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 最大数据量</span></span><br><span class="line">    max_limit = <span class="number">50</span></span><br><span class="line">    <span class="comment"># 数据量</span></span><br><span class="line">    limit_query_param = <span class="string">&#x27;limit&#x27;</span></span><br><span class="line">    <span class="comment"># 起始偏移位置</span></span><br><span class="line">    offset_query_param = <span class="string">&#x27;offset&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_paginated_response</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        overwrite 不要父类给的数据格式</span></span><br><span class="line"><span class="string">        :param data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_offset</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        overwrite 让起始偏移量 始终为0</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>结果集过滤器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleFilter</span>(<span class="title class_ inherited__">BaseFilterBackend</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">filter_queryset</span>(<span class="params">self, request, queryset, view</span>):</span><br><span class="line">        min_id = request.query_params.get(<span class="string">&#x27;min_id&#x27;</span>)</span><br><span class="line">        max_id = request.query_params.get(<span class="string">&#x27;max_id&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> min_id:</span><br><span class="line">            <span class="comment"># 处理上滑 翻页</span></span><br><span class="line">            queryset = queryset.<span class="built_in">filter</span>(id__lt=min_id).order_by(<span class="string">&#x27;-id&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> max_id:</span><br><span class="line">            <span class="comment"># 处理 下拉刷新</span></span><br><span class="line">            queryset = queryset.<span class="built_in">filter</span>(id__gt=max_id).order_by(<span class="string">&#x27;-id&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            queryset = queryset.order_by(<span class="string">&#x27;-id&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> queryset</span><br></pre></td></tr></table></figure><p>序列化器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleImageSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = ArticleImages  <span class="comment"># 设置关联模型     model就是关联模型</span></span><br><span class="line">        <span class="comment"># fields = &#x27;__all__&#x27;  # fields设置字段   __all__表示所有字段</span></span><br><span class="line">        exclude = []</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 此处为序列化器的嵌套  应用于关联表</span></span><br><span class="line">    images = ArticleImageSerializer(many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Articles  <span class="comment"># 设置关联模型     model就是关联模型</span></span><br><span class="line">        <span class="comment"># fields = &#x27;__all__&#x27;  # fields设置字段   __all__表示所有字段</span></span><br><span class="line">        <span class="comment"># fields = [&#x27;content&#x27;, &#x27;location&#x27;]</span></span><br><span class="line">        <span class="comment"># 排除的字段  直接丢弃  不验证 不入库</span></span><br><span class="line">        exclude = [<span class="string">&#x27;topic&#x27;</span>, <span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">        <span class="comment"># exclude = []</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># view中数据保存方法 save()执行之前  会调用该方法 通常应用在 序列化器嵌套情况下 一并将嵌套表的字段 入库</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        images = validated_data.pop(<span class="string">&#x27;images&#x27;</span>)</span><br><span class="line">        article_obj = Articles.objects.create(**validated_data)</span><br><span class="line">        images_obj = [ArticleImages.objects.create(**image, article=article_obj) <span class="keyword">for</span> image <span class="keyword">in</span> images]</span><br><span class="line">        article_obj.images = images_obj</span><br><span class="line">        <span class="keyword">return</span> article_obj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证字段 钩子</span></span><br><span class="line">    <span class="comment"># def validate_content(self, value):</span></span><br><span class="line">    <span class="comment">#     &quot;&quot;&quot; 验证是否还正在拍卖&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#     print(&#x27;正在验证&#x27;, value)</span></span><br><span class="line">    <span class="comment">#     # item_id = self.initial_data.get(&#x27;item&#x27;)</span></span><br><span class="line">    <span class="comment">#     # exists = models.AuctionItem.objects.filter(id=item_id, status=3).exists()</span></span><br><span class="line">    <span class="comment">#     # if not exists:</span></span><br><span class="line">    <span class="comment">#     #     raise exceptions.ValidationError(&#x27;拍卖商品不存在或已成交&#x27;)</span></span><br><span class="line">    <span class="comment">#     return value</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleSerializerForList</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Articles</span><br><span class="line">        exclude = []</span><br><span class="line"> <span class="comment"># 定义模型中没有的数据字段</span></span><br><span class="line">    topic = serializers.SerializerMethodField(label=<span class="string">&#x27;所属话题&#x27;</span>, default=<span class="string">&#x27;默认话题内容...&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    user = serializers.SerializerMethodField(label=<span class="string">&#x27;所属用户手机号&#x27;</span>, default=<span class="string">&#x27;13333333333&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    images = serializers.SerializerMethodField(label=<span class="string">&#x27;文章包含的图片&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 钩子方法   固定格式  get_xx(self,value)  xx表示上面对应的自定义字段 value表示当前的model对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_images</span>(<span class="params">self, value</span>):</span><br><span class="line">        images = ArticleImages.objects.<span class="built_in">filter</span>(article_id=value.<span class="built_in">id</span>).<span class="built_in">all</span>()</span><br><span class="line">        datas = []</span><br><span class="line">        <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">            datas.append(&#123;</span><br><span class="line">                <span class="string">&#x27;cos_path&#x27;</span>: image.cos_path,</span><br><span class="line">                <span class="string">&#x27;key&#x27;</span>: image.key</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_topic</span>(<span class="params">self, value</span>):</span><br><span class="line">        topic = value.topic</span><br><span class="line">        <span class="keyword">return</span> model_to_dict(instance=topic)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params">self, value</span>):</span><br><span class="line">        user = value.user</span><br><span class="line">        <span class="keyword">return</span> model_to_dict(instance=user)</span><br></pre></td></tr></table></figure><h1 id="model中外键和多对多关系的用法"><a href="#model中外键和多对多关系的用法" class="headerlink" title="model中外键和多对多关系的用法"></a>model中外键和多对多关系的用法</h1><blockquote><p>related_name 用作反向关联取得别名 如果表A中有两个外键字段 指向表B中的id  表B方向关联查找数据的时候就不知道应该反向关联谁了 related_name 显示指定别名可以防止此类情况<br>关联自己  可以使用self</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Comments</span>(models.Model):</span><br><span class="line">    content = models.CharField(verbose_name=<span class="string">&#x27;评论内容&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    depth = models.IntegerField(verbose_name=<span class="string">&#x27;评论级别&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 外键</span></span><br><span class="line">    article = models.ForeignKey(verbose_name=<span class="string">&#x27;所属文章&#x27;</span>, to=<span class="string">&#x27;Articles&#x27;</span>, on_delete=models.CASCADE, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    user = models.ForeignKey(verbose_name=<span class="string">&#x27;所属用户&#x27;</span>, to=<span class="string">&#x27;Users&#x27;</span>, on_delete=models.CASCADE, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    root = models.ForeignKey(verbose_name=<span class="string">&#x27;所属根评论&#x27;</span>, to=<span class="string">&#x27;self&#x27;</span>, related_name=<span class="string">&#x27;roots&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>,</span><br><span class="line">                             on_delete=models.CASCADE)</span><br><span class="line">    reply = models.ForeignKey(verbose_name=<span class="string">&#x27;上级评论&#x27;</span>, to=<span class="string">&#x27;self&#x27;</span>, related_name=<span class="string">&#x27;replys&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>,</span><br><span class="line">                              on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Articles</span>(models.Model):</span><br><span class="line">    content = models.CharField(verbose_name=<span class="string">&#x27;文章内容&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    location = models.CharField(verbose_name=<span class="string">&#x27;地理位置&#x27;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    view_count = models.PositiveIntegerField(verbose_name=<span class="string">&#x27;浏览数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    like_count = models.PositiveIntegerField(verbose_name=<span class="string">&#x27;点赞数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    comment_count = models.PositiveIntegerField(verbose_name=<span class="string">&#x27;评论数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 外键</span></span><br><span class="line">    topic = models.ForeignKey(verbose_name=<span class="string">&#x27;所属话题&#x27;</span>, to=<span class="string">&#x27;Topics&#x27;</span>, on_delete=models.CASCADE, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    user = models.ForeignKey(verbose_name=<span class="string">&#x27;所属用户&#x27;</span>, to=<span class="string">&#x27;Users&#x27;</span>, on_delete=models.CASCADE, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 浏览记录 多对多</span></span><br><span class="line">    viwers = models.ManyToManyField(<span class="string">&#x27;Users&#x27;</span>, related_name=<span class="string">&#x27;views&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>上面的多对多关系  起始就是建立了中间表 中间表使用两个外键关联两张表 构成多对多关系  与手动创建中间表效果一样</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ViewRecords</span>(models.Model):</span><br><span class="line">     <span class="comment"># 外键</span></span><br><span class="line">     user = models.ForeignKey(verbose_name=<span class="string">&#x27;所属用户&#x27;</span>, to=<span class="string">&#x27;Users&#x27;</span>, on_delete=models.CASCADE, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">     article = models.ForeignKey(verbose_name=<span class="string">&#x27;所属文章&#x27;</span>, to=<span class="string">&#x27;Articles&#x27;</span>, on_delete=models.CASCADE, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="跨表取值"><a href="#跨表取值" class="headerlink" title="跨表取值"></a>跨表取值</h1><ul><li>A表含有主键指向B表 现有A表的模型对象a 可以直接通过 __a.主键名__获取B表模型对象从而得到B表的数据 （主动查询）</li><li>反之，现有B表的模型对象b，想通过b取到A表的值，可以通过  <strong>b.a表小写表名_set</strong> 来得到A表中的数据   _set 为固定格式写法</li></ul><h1 id="数据库填充数据脚本"><a href="#数据库填充数据脚本" class="headerlink" title="数据库填充数据脚本"></a>数据库填充数据脚本</h1><blockquote><p>原理 就是在外部通过加载django环境 让脚本中可以利用django的model快速操作数据库</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">sys.path.append(os.getcwd())</span><br><span class="line">os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;miniprogramapi.settings&quot;</span>)</span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line"></span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> api.models <span class="keyword">import</span> Topics, Articles, Users, ArticleImages</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增用户</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    r = random.randint(<span class="number">111111111</span>, <span class="number">999999999</span>)</span><br><span class="line">    Users.objects.create(</span><br><span class="line">        phone=<span class="string">f&#x27;13<span class="subst">&#123;r&#125;</span>&#x27;</span>,</span><br><span class="line">        token=uuid.uuid4(),</span><br><span class="line">        nickname=<span class="string">f&#x27;哨兵<span class="subst">&#123;r&#125;</span>号&#x27;</span>,</span><br><span class="line">        avatar=<span class="string">&#x27;http://himg.bdimg.com/sys/portrait/item/c9eee4b89ce69da5e4b89ce5be80e79a84e78caaa629.jpg&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增话题</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    r = random.randint(<span class="number">1</span>, <span class="number">200</span>)</span><br><span class="line">    Topics.objects.create(</span><br><span class="line">        content=<span class="string">f&quot;我是话题<span class="subst">&#123;r&#125;</span>&quot;</span>,</span><br><span class="line">        hot=r</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增文章</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    r = random.randint(<span class="number">1</span>, <span class="number">200</span>)</span><br><span class="line">    Articles.objects.create(</span><br><span class="line">        content=<span class="string">f&quot;文章内容<span class="subst">&#123;r&#125;</span>&quot;</span>,</span><br><span class="line">        location=<span class="string">f&quot;明珠路<span class="subst">&#123;r&#125;</span>&quot;</span>,</span><br><span class="line">        view_count=<span class="number">1</span>,</span><br><span class="line">        like_count=<span class="number">1</span>,</span><br><span class="line">        comment_count=<span class="number">1</span>,</span><br><span class="line">        topic=Topics.objects.get(<span class="built_in">id</span>=random.choice([topic.<span class="built_in">id</span> <span class="keyword">for</span> topic <span class="keyword">in</span> Topics.objects.<span class="built_in">all</span>()])),</span><br><span class="line">        user=Users.objects.get(<span class="built_in">id</span>=random.choice([user.<span class="built_in">id</span> <span class="keyword">for</span> user <span class="keyword">in</span> Users.objects.<span class="built_in">all</span>()]))</span><br><span class="line"></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h1 id="序列化器中数据的校验"><a href="#序列化器中数据的校验" class="headerlink" title="序列化器中数据的校验"></a>序列化器中数据的校验</h1><ol><li>方法一 指定数据行验证类  利用 <strong>call</strong>()方法进行校验</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class LoginSerializer(serializers.Serializer):</span><br><span class="line">    phone = serializers.CharField(label=&#x27;手机号&#x27;, validators=[PasswordValidator()])</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PasswordValidator(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def __call__(self, value, *args, **kwargs):</span><br><span class="line">        if len(value) != 11:</span><br><span class="line">            raise serializers.ValidationError(&#x27;手机号码长度不正确&#x27;)</span><br><span class="line">        if not re.match(r&#x27;^\d+$&#x27;, value):</span><br><span class="line">            raise serializers.ValidationError(&#x27;手机号必须为数字&#x27;)</span><br><span class="line"></span><br><span class="line">    def set_context(self, serializer_field):</span><br><span class="line">        # print(serializer_field)</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><ol start="2"><li>方法二 指定自定义验证函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginSerializer</span>(serializers.Serializer):</span><br><span class="line">    phone = serializers.CharField(label=<span class="string">&#x27;手机号&#x27;</span>, validators=[foo])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义的验证函数 value表示被验证字段</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ol start="3"><li>方法三 使用钩子</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginSerializer</span>(serializers.Serializer):</span><br><span class="line">    phone = serializers.CharField(label=<span class="string">&#x27;手机号&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 以 validate_xxx  形式开头的方法是验证钩子  会自动调用进行字段验证</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_phone</span>(<span class="params">self, value</span>):</span><br><span class="line">         <span class="built_in">print</span>(value + <span class="string">&#x27;``````````&#x27;</span>)</span><br><span class="line">         <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">         <span class="keyword">return</span> value</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 未认证情况下 默认用户和令牌为None</span></span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_TOKEN&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;UNAUTHENTICATED_USER&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="comment"># 可以通过全局指定的方式 指定登录认证的中间件位置</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<span class="string">&#x27;api.utils.LoginAuthentication&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> api.models <span class="keyword">import</span> Users</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyGeneralAuthentication</span>(<span class="title class_ inherited__">BaseAuthentication</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authenticate</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :return: None -表示本认证器不做任何处理直接交给下一个认证器 认证成功会返回一个元组  (user,token) 表示认证成功 并分贝绑定在</span></span><br><span class="line"><span class="string">        request.user request.auth 属性上</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 获取token</span></span><br><span class="line">        <span class="comment"># 注意： 特别值得注意的是  前端 header = &#123;</span></span><br><span class="line">        <span class="comment">#   &#x27;authentication&#x27;: 578fff92-e481-4223-a49a-427cdadfd915</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line">        <span class="comment"># drf框架中接收的时候   需要 加 HTTP_ 前缀 并将key全大写</span></span><br><span class="line">        token = request.META.get(<span class="string">&#x27;HTTP_AUTHENTICATION&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 如果token没有带过来</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 如果token是错误的</span></span><br><span class="line">        user = Users.objects.<span class="built_in">filter</span>(token=token).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 通过认证  会返回一个元组（登录用户对象，登录用户token） 并将其作为request属性绑定上  使用的时候可以通过</span></span><br><span class="line">        <span class="comment"># request.user request.auth 拿到</span></span><br><span class="line">        <span class="comment"># print(user, token)</span></span><br><span class="line">        <span class="keyword">return</span> user, token</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后可以在view中指定 认证器类名 处理认证过程的业务逻辑可以通过 重写方法来进行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticleDetailView</span>(RetrieveAPIView, UpdateAPIView, DestroyAPIView):</span><br><span class="line">    <span class="comment"># 查询结果集</span></span><br><span class="line">    queryset = Articles.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 序列化器类</span></span><br><span class="line">    serializer_class = ArticleSerializerForList</span><br><span class="line">    <span class="comment"># django 默认的主键形参为pk 如果改用其他 应通过 lookup_field 显试指定出来</span></span><br><span class="line">    lookup_field = <span class="string">&#x27;id&#x27;</span></span><br><span class="line">    <span class="comment"># 指定登录认证器</span></span><br><span class="line">    authentication_classes = [MyGeneralAuthentication]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        response = <span class="built_in">super</span>().get(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 此处验证是否登录  如果登录了 就可以更新浏览记录</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.auth:</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否浏览记录已经存在 不用再添加了</span></span><br><span class="line">        <span class="comment"># 拿到该文章所有的浏览记录</span></span><br><span class="line">        <span class="built_in">id</span> = kwargs.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        article = Articles.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).first()</span><br><span class="line">        user = request.user</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">in</span> [u <span class="keyword">for</span> u <span class="keyword">in</span> article.viwers.<span class="built_in">all</span>()]:</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向中间表添加数据  也就是浏览记录</span></span><br><span class="line">        article.viwers.add(user)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="celery的使用"><a href="#celery的使用" class="headerlink" title="celery的使用"></a>celery的使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install celery</span><br><span class="line">pip install redis</span><br><span class="line">pip install eventlet <span class="comment"># eventlet 只有windows下才需要安装 linux不需要安装</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">broker 指定任务队列</span></span><br><span class="line"><span class="string">backend 指定结果队列</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>,</span><br><span class="line">             backend=<span class="string">&#x27;redis://localhost:6379/0&#x27;</span>,</span><br><span class="line">             broker=<span class="string">&#x27;redis://localhost:6379/0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">使用 @app.task 装饰后就成为了一个 可以被celery调度的任务</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#不要直接 add(4, 4)，这里需要用 celery 提供的接口 delay 进行调用</span></span><br><span class="line">result = add.delay(<span class="number">4</span>, <span class="number">4</span>)  </span><br><span class="line"><span class="built_in">print</span>(result.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 reslut.ready() 判断add这个task是否处理结束</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> result.ready():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 可以通过 result.get() 来获取task的结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;task done: <span class="subst">&#123;result.get()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：worker 的启动命令<br>celery worker -A taskproj -l info -P eventlet<br>只有windows平台需要指定  -P eventlet 在linux下不需要</p></blockquote><h1 id="celery-与-django-嵌入使用"><a href="#celery-与-django-嵌入使用" class="headerlink" title="celery 与 django 嵌入使用"></a>celery 与 django 嵌入使用</h1><h2 id="django-项目名为：-miniprogramapi-项目同名目录-miniprogramapi-创建的app名称为-testcelery"><a href="#django-项目名为：-miniprogramapi-项目同名目录-miniprogramapi-创建的app名称为-testcelery" class="headerlink" title="django 项目名为： miniprogramapi  项目同名目录  miniprogramapi  创建的app名称为 testcelery"></a>django 项目名为： miniprogramapi  项目同名目录  miniprogramapi  创建的app名称为 testcelery</h2><ol><li><p>在项目的同名目录下创建celery.py文件   miniprogramapi&#x2F;miniprogramapi&#x2F;celery.py</p><blockquote><p>文件名必须为 celery.py 固定不能变</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置django环境</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;miniprogramapi.settings&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;testcelery&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用CELERY_ 作为前缀，在settings中写配置</span></span><br><span class="line">app.config_from_object(<span class="string">&#x27;django.conf:settings&#x27;</span>, namespace=<span class="string">&#x27;CELERY&#x27;</span>)</span><br><span class="line"><span class="comment"># 发现任务文件每个app下的task.py</span></span><br><span class="line">app.autodiscover_tasks()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>在项目的同名目录下 <code>__init__.py</code> 文件中添加内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">&#x27;celery_app&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>在项目同名文件夹 settings.py 中添加关于 celery的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ******************************* celery的配置 ***************************</span></span><br><span class="line"><span class="comment"># Broker配置，使用Redis作为消息中间件</span></span><br><span class="line">CELERY_BROKER_URL = <span class="string">&#x27;redis://127.0.0.1:6379/0&#x27;</span></span><br><span class="line"><span class="comment"># BACKEND配置，这里使用redis</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">&#x27;redis://127.0.0.1:6379/0&#x27;</span></span><br><span class="line"><span class="comment"># 结果序列化方案</span></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">&#x27;json&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在创建的app中定义 tasks.py 文件</p><blockquote><p>文件名必须叫 tasks.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x * y</span><br></pre></td></tr></table></figure></li><li><p>启动 worker的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery worker -A miniprogramapi -l info -P eventlet</span><br></pre></td></tr></table></figure></li><li><p>编写urls</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> testcelery.views <span class="keyword">import</span> TestCelery, ResultCelery</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;testcelery&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 执行触发celery task</span></span><br><span class="line">    path(<span class="string">&#x27;celery/&#x27;</span>, TestCelery.as_view(), name=<span class="string">&#x27;celery&#x27;</span>),</span><br><span class="line">    <span class="comment"># 查询celery task的执行结果</span></span><br><span class="line">    path(<span class="string">&#x27;result/&#x27;</span>, ResultCelery.as_view(), name=<span class="string">&#x27;result&#x27;</span>),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>编写视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> miniprogramapi <span class="keyword">import</span> celery_app</span><br><span class="line"><span class="keyword">from</span> testcelery <span class="keyword">import</span> tasks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCelery</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        res = tasks.add.delay(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 任务逻辑</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;successful&#x27;</span>, <span class="string">&#x27;task_id&#x27;</span>: res.task_id&#125;</span><br><span class="line">        <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResultCelery</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        result_id = request.query_params.<span class="built_in">dict</span>().get(<span class="string">&#x27;result_id&#x27;</span>)</span><br><span class="line">        <span class="comment"># result_id = &#x27;1f9b12da-f4da-4562-a6d1-ad2d7e18d86b&#x27;</span></span><br><span class="line">        result_obj = AsyncResult(<span class="built_in">id</span>=result_id, app=celery_app)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;state&#x27;</span>: result_obj.state,</span><br><span class="line">            <span class="string">&#x27;result&#x27;</span>: result_obj.get()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>　　除了redis、rabbitmq能做结果存储外，还可以使用Django的orm作为结果存储，当然需要安装依赖插件，这样的好处在于我们可以直接通过django的数据查看到任务状态，同时为可以制定更多的操作，下面介绍如何使用orm作为结果存储。</p><ol><li>安装</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-celery-results</span><br></pre></td></tr></table></figure><ol start="2"><li>配置settings.py，注册app</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...,</span><br><span class="line">    <span class="string">&#x27;django_celery_results&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li>修改backend配置，将redis改为django-db</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CELERY_RESULT_BACKEND = &#x27;redis://127.0.0.1:6379/0&#x27; # BACKEND配置，这里使用redis</span></span><br><span class="line"></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">&#x27;django-db&#x27;</span>  <span class="comment">#使用django orm 作为结果存储</span></span><br></pre></td></tr></table></figure><ol start="4"><li>修改数据库</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py migrate django_celery_results</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux配置jdk</title>
      <link href="/2022/07/15/linux%E9%85%8D%E7%BD%AEjdk/"/>
      <url>/2022/07/15/linux%E9%85%8D%E7%BD%AEjdk/</url>
      
        <content type="html"><![CDATA[<p>sudo vim &#x2F;etc&#x2F;profile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Java Env</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>source &#x2F;etc&#x2F;profile</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django在linux上部署</title>
      <link href="/2022/07/15/django%E5%9C%A8linux%E4%B8%8A%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/07/15/django%E5%9C%A8linux%E4%B8%8A%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/2f277d5945adca259fae6a5c175f08e3.png" alt="image.png"></p><h1 id="nginx配置文件-nginx-conf"><a href="#nginx配置文件-nginx-conf" class="headerlink" title="nginx配置文件 nginx.conf"></a>nginx配置文件 nginx.conf</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /usr/local/nginx/conf/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line"></span><br><span class="line">  root /home/abel/code/website;</span><br><span class="line"></span><br><span class="line">  location /static &#123;</span><br><span class="line">   <span class="built_in">alias</span> /home/abel/code/website/static;</span><br><span class="line">  &#125;</span><br><span class="line">  location / &#123;</span><br><span class="line">   include /usr/local/nginx/conf/uwsgi_params;</span><br><span class="line">   uwsgi_pass 127.0.0.1:8011;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="uwsgi配置文件-uwsgi-ini-django"><a href="#uwsgi配置文件-uwsgi-ini-django" class="headerlink" title="uwsgi配置文件  uwsgi.ini   (django)"></a>uwsgi配置文件  uwsgi.ini   (django)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># 使用nginx反向代理时使用</span></span><br><span class="line">;socket = 127.0.0.1:8011</span><br><span class="line"><span class="comment"># 直接作为web服务器使用 记得host一定要是0.0.0.0</span></span><br><span class="line">http = 0.0.0.0:8010</span><br><span class="line"><span class="comment"># 配置工程目录</span></span><br><span class="line"><span class="built_in">chdir</span> = /tmp/pycharm_project_368</span><br><span class="line"><span class="comment"># 配置项目的wsgi目录 注意是相对于工程目录 wsgi.py 文件时django框架自动生成的</span></span><br><span class="line">wsgi-file = testdjango/wsgi.py</span><br><span class="line"><span class="comment"># 配置虚拟环境</span></span><br><span class="line">;home = /root/.venvs/py38</span><br><span class="line"><span class="comment"># 配置进程线程的信息</span></span><br><span class="line">processes = 1</span><br><span class="line">threads = 1</span><br></pre></td></tr></table></figure><h1 id="uwsgi配置文件-uwsgi-ini-flask"><a href="#uwsgi配置文件-uwsgi-ini-flask" class="headerlink" title="uwsgi配置文件  uwsgi.ini   (flask)"></a>uwsgi配置文件  uwsgi.ini   (flask)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[uwsgi]</span><br><span class="line"><span class="comment">#uwsgi启动时，所使用的地址和端口（这个是http协议的）</span></span><br><span class="line">http = 0.0.0.0:5001</span><br><span class="line"><span class="comment"># 虚拟环境路径</span></span><br><span class="line">virtualenv = /root/.venvs/py38</span><br><span class="line"><span class="comment">#指向网站目录</span></span><br><span class="line"><span class="built_in">chdir</span> = /tmp/pycharm_project_697</span><br><span class="line"><span class="comment">#python 启动程序文件</span></span><br><span class="line">wsgi-file = myflask.py</span><br><span class="line"><span class="comment">#python 程序内用以启动的application 变量名</span></span><br><span class="line">callable = app</span><br><span class="line"><span class="comment">#处理器数</span></span><br><span class="line">processes = 4</span><br><span class="line"><span class="comment">#线程数</span></span><br><span class="line">threads = 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：flask程序中  app.run(host&#x3D;’0.0.0.0’)     host 一定要写 要不然远程访问不了</p></blockquote><h1 id="uwsgi-相关命令"><a href="#uwsgi-相关命令" class="headerlink" title="uwsgi 相关命令"></a>uwsgi 相关命令</h1><blockquote><p>进入虚拟环境 安装uwsgi</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><p>测试uwsgi，创建test.py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">env, start_response</span>):</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b&quot;Hello World&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8001 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200928084241176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>停止</li></ul><blockquote><p><code>uwsgi --stop /home/abel/code/website/uwsgi.pid</code></p></blockquote><ul><li>开启 （一定要先进入虚拟环境）</li></ul><blockquote><p><code>uwsgi --ini /home/abel/code/website/uwsgi.ini</code></p></blockquote><h1 id="nginx-相关命令"><a href="#nginx-相关命令" class="headerlink" title="nginx 相关命令"></a>nginx 相关命令</h1><ul><li>关闭</li></ul><blockquote><p><code>sudo nginx -s quit</code></p></blockquote><ul><li>重新加载配置文件</li></ul><blockquote><p><code>sudo nginx -s reload</code></p></blockquote><ul><li>测试配置文件</li></ul><blockquote><p><code>sudo nginx -t -c /home/abel/code/website/nginx.conf</code></p></blockquote><ul><li>启动</li></ul><blockquote><p><code>sudo nginx -c /home/abel/code/website/nginx.conf</code></p></blockquote><ul><li>查看服务是否活着</li></ul><blockquote><p><code>ps -ef | grep nginx</code></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos7图形界面和字符界面切换命令</title>
      <link href="/2022/07/15/centos7%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%92%8C%E5%AD%97%E7%AC%A6%E7%95%8C%E9%9D%A2%E5%88%87%E6%8D%A2%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/07/15/centos7%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%92%8C%E5%AD%97%E7%AC%A6%E7%95%8C%E9%9D%A2%E5%88%87%E6%8D%A2%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>开机以命令模式启动，执行：<br>systemctl set-default multi-user.target</p><p>开机以图形界面启动，执行：<br>systemctl set-default graphical.target</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>allure制定清晰的pytest测试报告</title>
      <link href="/2022/07/15/allure%E5%88%B6%E5%AE%9A%E6%B8%85%E6%99%B0%E7%9A%84pytest%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
      <url>/2022/07/15/allure%E5%88%B6%E5%AE%9A%E6%B8%85%E6%99%B0%E7%9A%84pytest%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># feature() 给功能模块取个名字 一个功能模块包含多个功能点 一般一个功能模块就作为一个类</span></span><br><span class="line"><span class="meta">@allure.feature(<span class="params"><span class="string">&#x27;购物车功能&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestShoppingTrolley</span>:</span><br><span class="line">    <span class="comment"># story() 给功能点取个名字 一般一个功能点就作为一个方法</span></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">&#x27;加入购物车&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_shopping_trolley</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 步骤1  因为login() 被装饰器 @allure.step()装饰过 报告中会将步骤详细展示出来</span></span><br><span class="line">        login(<span class="string">&#x27;刘春明&#x27;</span>, <span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">        <span class="comment"># 步骤2</span></span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">&quot;浏览商品&quot;</span>):</span><br><span class="line">            <span class="comment"># attach() 添加文本信息到报告中</span></span><br><span class="line">            allure.attach(<span class="string">&#x27;笔记本&#x27;</span>, <span class="string">&#x27;商品1&#x27;</span>)</span><br><span class="line">            allure.attach(<span class="string">&#x27;手机&#x27;</span>, <span class="string">&#x27;商品2&#x27;</span>)</span><br><span class="line">            <span class="comment"># attach() 添加截图信息到报告中</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./商品3截图.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                file = f.read()</span><br><span class="line">            allure.attach(file, <span class="string">&#x27;商品3&#x27;</span>, allure.attachment_type.PNG)</span><br><span class="line">        <span class="comment"># 步骤3</span></span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">&quot;点击商品&quot;</span>):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># 步骤4</span></span><br><span class="line">        <span class="keyword">with</span> allure.step(<span class="string">&quot;校验结果&quot;</span>):</span><br><span class="line">            allure.attach(<span class="string">&#x27;添加购物车成功&#x27;</span>, <span class="string">&#x27;期望结果&#x27;</span>)</span><br><span class="line">            allure.attach(<span class="string">&#x27;添加购物车失败&#x27;</span>, <span class="string">&#x27;实际结果&#x27;</span>)</span><br><span class="line">            <span class="keyword">assert</span> <span class="string">&#x27;success&#x27;</span> == <span class="string">&#x27;failed&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">&#x27;修改购物车&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_edit_shopping_trolley</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pytest.mark.skipif(<span class="params">reason=<span class="string">&#x27;本次不执行&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">&#x27;删除购物车中商品&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_delete_shopping_trolley</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.step(<span class="params"><span class="string">&#x27;用户登录&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">user, pwd</span>):</span><br><span class="line">    <span class="built_in">print</span>(user, pwd)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pytest cases\test_allure2.py --alluredir ./result/</span><br><span class="line">allure generate ./result -o ./report --clean</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200925164629780.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装python3.8</title>
      <link href="/2022/07/15/centos7%E5%AE%89%E8%A3%85python3-8/"/>
      <url>/2022/07/15/centos7%E5%AE%89%E8%A3%85python3-8/</url>
      
        <content type="html"><![CDATA[<h1 id="0-安装gcc-、c-编译器以及内核文件"><a href="#0-安装gcc-、c-编译器以及内核文件" class="headerlink" title="0. 安装gcc 、c++编译器以及内核文件"></a>0. 安装gcc 、c++编译器以及内核文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ kernel-devel</span><br></pre></td></tr></table></figure><h1 id="1-安装最新版openssl"><a href="#1-安装最新版openssl" class="headerlink" title="1. 安装最新版openssl"></a>1. 安装最新版openssl</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ./config --prefix=/usr/local/openssl</span><br><span class="line">sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>安装好之后进行配置</p><blockquote><p>备份原来的openssl命令<br>mv &#x2F;usr&#x2F;bin&#x2F;openssl &#x2F;usr&#x2F;bin&#x2F;openssl.bak<br>将安装好的bin目录中的openssl文件软连到&#x2F;usr&#x2F;bin&#x2F;openssl<br>ln -s &#x2F;usr&#x2F;local&#x2F;openssl&#x2F;bin&#x2F;openssl &#x2F;usr&#x2F;bin&#x2F;openssl<br>将安装好的openssl 的openssl目录软连到&#x2F;usr&#x2F;include&#x2F;openssl<br>ln -s &#x2F;usr&#x2F;local&#x2F;openssl&#x2F;include&#x2F;openssl &#x2F;usr&#x2F;include&#x2F;openssl<br>修改系统自带的openssl库文件，如&#x2F;usr&#x2F;local&#x2F;lib64&#x2F;libssl.so(根据机器环境而定) 软链到升级后的libssl.so<br>ln -s &#x2F;usr&#x2F;local&#x2F;openssl&#x2F;lib&#x2F;libssl.so.1.1 &#x2F;usr&#x2F;local&#x2F;lib64&#x2F;libssl.so     —-注意时usr&#x2F;local下的lib64不是&#x2F;usr&#x2F;lib64，两个目录下有同名目录，有可能在&#x2F;usr&#x2F;local&#x2F;lib64&#x2F;并不存在文件<br>在&#x2F;etc&#x2F;ld.so.conf文件中写入openssl库文件的搜索路径<br>echo “&#x2F;usr&#x2F;local&#x2F;related&#x2F;openssl&#x2F;lib” &gt;&gt; &#x2F;etc&#x2F;ld.so.conf<br>使修改后的&#x2F;etc&#x2F;ld.so.conf生效<br>ldconfig -v<br>最好查看下openssl版本号，看是否已经更新成最新的，<br>openssl version -a</p></blockquote><h1 id="2-安装python3-8"><a href="#2-安装python3-8" class="headerlink" title="2. 安装python3.8"></a>2. 安装python3.8</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure --prefix=/usr/local/python38 --enable-shared --with-openssl=/usr/local/openssl</span><br><span class="line">sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><blockquote><p>安装过程中的报错处理<br>报gcc错误<br>yum -y install gcc<br>报zlib错误<br>yum -y install zlib*<br>报 ‘_ctypes’的错误。<br>yum install libffi-devel -y</p></blockquote><h1 id="3-建立软连接方便使用"><a href="#3-建立软连接方便使用" class="headerlink" title="3. 建立软连接方便使用"></a>3. 建立软连接方便使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/python38/bin/python3.8 /usr/bin/python38</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/python38/bin/pip3.8 /usr/bin/pip38</span><br></pre></td></tr></table></figure><h1 id="4-pip换源-x2F-pip-x2F-pip-conf"><a href="#4-pip换源-x2F-pip-x2F-pip-conf" class="headerlink" title="4. pip换源 ~&#x2F;.pip&#x2F;pip.conf"></a>4. pip换源 ~&#x2F;.pip&#x2F;pip.conf</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br><span class="line">[list]</span><br><span class="line">format=columns</span><br></pre></td></tr></table></figure><h1 id="5-安装virtualenvwrapper"><a href="#5-安装virtualenvwrapper" class="headerlink" title="5. 安装virtualenvwrapper"></a>5. 安装virtualenvwrapper</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip38 install virtualenvwrapper</span><br></pre></td></tr></table></figure><blockquote><p>可能会报错 动态库错误  拷贝一下就行了<br>error while loading shared libraries: libpython3.8m.so.1.1:cannot open shared object file: No such file or directory</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/local/python38/lib/libpython3.8.so.1.0 /usr/lib64/</span><br></pre></td></tr></table></figure><h1 id="6-配置virtualenvwrapper"><a href="#6-配置virtualenvwrapper" class="headerlink" title="6. 配置virtualenvwrapper"></a>6. 配置virtualenvwrapper</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WORKON_HOME=~/.venvs</span><br><span class="line">VIRTUALENVWRAPPER_VIRTUALENV_ARGS=<span class="string">&#x27;--no-site-packages&#x27;</span></span><br><span class="line">VIRTUALENVWRAPPER_PYTHON=/usr/local/python38/bin/python3.8</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python38/bin/virtualenv</span><br><span class="line"><span class="built_in">source</span> /usr/local/python38/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><p>在 ~&#x2F;.bashrc 中写入上面内容<br>source ~&#x2F;.bashrc 使其生效</p><h1 id="7-创建虚拟环境"><a href="#7-创建虚拟环境" class="headerlink" title="7. 创建虚拟环境"></a>7. 创建虚拟环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv py38</span><br></pre></td></tr></table></figure><blockquote><p>如果报 ‘–no-site-packages’ 无效的不能识别的参数 错误<br>则需要更新virtualenv</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip38 install --upgrade virtualenv==16.7.9</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jmeter调用jar包</title>
      <link href="/2022/07/15/jmeter%E8%B0%83%E7%94%A8jar%E5%8C%85/"/>
      <url>/2022/07/15/jmeter%E8%B0%83%E7%94%A8jar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="1-导出jar包"><a href="#1-导出jar包" class="headerlink" title="1. 导出jar包"></a>1. 导出jar包</h1><blockquote><p>jar包内部逻辑代码如下：（模拟加盐）</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200924094817229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200924094942484.png#pic_center" alt="在这里插入图片描述"></p><h1 id="2-将jar包导入jmeter"><a href="#2-将jar包导入jmeter" class="headerlink" title="2. 将jar包导入jmeter"></a>2. 将jar包导入jmeter</h1><p><img src="https://img-blog.csdnimg.cn/20200924095255333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="3-添加-BeanShell取样器"><a href="#3-添加-BeanShell取样器" class="headerlink" title="3. 添加 BeanShell取样器"></a>3. 添加 BeanShell取样器</h1><p><img src="https://img-blog.csdnimg.cn/20200924100419144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 导入jar包</span><br><span class="line">import com.abel.Test;</span><br><span class="line">String param = &quot;rose&quot;;</span><br><span class="line">// 调用jar包中的方法</span><br><span class="line">String res = Test.GetMD5(param);</span><br><span class="line">// 将结果赋值给jmeter中的变量进行引用</span><br><span class="line">vars.put(&quot;res&quot;,res)</span><br></pre></td></tr></table></figure><h1 id="4-在请求中使用该变量"><a href="#4-在请求中使用该变量" class="headerlink" title="4. 在请求中使用该变量"></a>4. 在请求中使用该变量</h1><p><img src="https://img-blog.csdnimg.cn/20200924100618897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="5-最终jmter就可以调用通过jar包计算出的结果了"><a href="#5-最终jmter就可以调用通过jar包计算出的结果了" class="headerlink" title="5. 最终jmter就可以调用通过jar包计算出的结果了"></a>5. 最终jmter就可以调用通过jar包计算出的结果了</h1><p><img src="https://img-blog.csdnimg.cn/20200924100731631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>性能测试监控方案02</title>
      <link href="/2022/07/15/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%8802/"/>
      <url>/2022/07/15/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%8802/</url>
      
        <content type="html"><![CDATA[<h1 id="所需的插件包和收集器"><a href="#所需的插件包和收集器" class="headerlink" title="所需的插件包和收集器"></a>所需的插件包和收集器</h1><p><img src="https://img-blog.csdnimg.cn/2020092209233237.png#pic_center" alt="在这里插入图片描述"></p><ol><li><p>将插件包解压在 lib&#x2F;ext目录下<br><img src="https://img-blog.csdnimg.cn/20200922092402489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>将ServerAgent收集器上传到需要被监控的机器，解压，启动 （linux启动startAgent.sh win启动startAgent.bat）<br><img src="https://img-blog.csdnimg.cn/2020092209241943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>开启被监控机器的【4444】端口进行监听<br><img src="https://img-blog.csdnimg.cn/20200922092433954.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>Jmeter中启用 【PerfMon Metrics Collector】元件 进行监控<br><img src="https://img-blog.csdnimg.cn/2020092209245027.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p>【PerfMon Metrics Collector】元件配置如下</p></li></ol><p><img src="https://img-blog.csdnimg.cn/2020092209250636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>6. 启动脚本给被监控机器负载一定压力，效果就出来了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>性能测试监控方案</title>
      <link href="/2022/07/15/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88/"/>
      <url>/2022/07/15/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>node_exporter+prometheus+grafana<br>利用Jmeter做性能测试的时候，通常使用的是 ServerAgent的资源监控方案，但ServerAgent图表实在是太丑了。于是乎发现了node_exporter+prometheus+grafana这种监控组合，当然主要是借助grafana漂亮的图表。</p></blockquote><ul><li>node_exporter （采集数据）</li><li>prometheus  （存储数据）</li><li>grafana       （展示数据）</li></ul><p>本文所使用的安装包如下：<br><img src="https://img-blog.csdnimg.cn/20200921170238100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="安装go语言环境"><a href="#安装go语言环境" class="headerlink" title="安装go语言环境"></a>安装go语言环境</h1><blockquote><p>由于prometheus是go语言开发的，所以需要提前安装好go语言环境。<br>root@archive soft]# tar -C &#x2F;usr&#x2F;local -xzf go1.8.3.linux-amd64.tar.gz</p><p>[root@archive soft]# vim  &#x2F;etc&#x2F;profile</p><p>在文件的最后添加如下内容：</p><p>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin</p><p>保存退出后，接着让配置文件立刻生效：</p><p>[root@archive aiops]# source  &#x2F;etc&#x2F;profile</p><p>验证一下是否成功，用go version 来验证</p><p>[root@archive aiops]# go  version</p><p>go version go1.8.3 linux&#x2F;amd64<br><img src="https://img-blog.csdnimg.cn/20200921170720180.png#pic_center" alt="在这里插入图片描述"></p></blockquote><h1 id="安装node-exporter"><a href="#安装node-exporter" class="headerlink" title="安装node_exporter"></a>安装node_exporter</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf node_exporter安装包.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">cd</span> /usr/local/node_exporter文件夹名</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">sudo ./node_exporter</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200921171525291.png#pic_center" alt="在这里插入图片描述"></p><p>node_exporter启动后默认会通过9100端口向外（prometheus）发送数据。</p><h1 id="安装prometheus"><a href="#安装prometheus" class="headerlink" title="安装prometheus"></a>安装prometheus</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf prometheus安装包.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">cd</span> /usr/local/prometheus文件夹名</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">sudo ./prometheus</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200921171507435.png#pic_center" alt="在这里插入图片描述"><br>修改prometheus.yml文件，接收node_exoprter采集到的资源数据。<br><img src="https://img-blog.csdnimg.cn/20200921171931374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>修改后重新启动prometheus</p><p>在目标机器IP:9090&#x2F;metrics 可以打开prometheus的监控界面<br><img src="https://img-blog.csdnimg.cn/2020092117235036.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="安装grafana"><a href="#安装grafana" class="headerlink" title="安装grafana"></a>安装grafana</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum localinstall grafana安装包.rpm</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200921172150991.png#pic_center" alt="在这里插入图片描述"></p><p>为grafana添加数据源<br>ip:3000端口可以打开 监控界面      默认的账号密码为：admin&#x2F;admin 第一次成功登录后会要求修改密码<br><img src="https://img-blog.csdnimg.cn/20200921172947898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200921173040895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200921173210670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p><a href="https://grafana.com/grafana/dashboards/8919?src=grafana_search">https://grafana.com/grafana/dashboards/8919?src=grafana_search</a><br><img src="https://img-blog.csdnimg.cn/20200921173239396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200921173425849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200921173632102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在prometheus中切换dashboard至上面安装好的仪表盘：<br><img src="https://img-blog.csdnimg.cn/20200921173823389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>最终效果就出现了。</p></blockquote><p>最终监控面板效果：<br><img src="https://img-blog.csdnimg.cn/20200921172500116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FiZWxyb3g=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo上传图片</title>
      <link href="/2022/07/08/hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2022/07/08/hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<ol><li>开启图片文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>安装图片插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>2.1 修改该插件中的<code>index.js</code>内容</p><blockquote><p><code>node_modules/hexo-asset-image/index.js</code> 中大约59行左右内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">info</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span> + config.<span class="property">root</span> + link + src);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>创建文章</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;hexo上传图片&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>将图片放到md文件的同名文件夹中</li></ol><p><img src="https://chengyijun.github.io/2022/07/08/hexo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84.jpg"></p><ol start="5"><li>引用图片</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](hexo上传图片/1.png)</span><br></pre></td></tr></table></figure><ol start="6"><li>生成推送看效果</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git培训讲义</title>
      <link href="/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/"/>
      <url>/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h3 id="GIT培训讲义"><a href="#GIT培训讲义" class="headerlink" title="GIT培训讲义"></a>GIT培训讲义</h3><blockquote><p>作者：程义军</p><p>时间：2022-07-06</p></blockquote><h4 id="1-为什么是GIT而不是SVN"><a href="#1-为什么是GIT而不是SVN" class="headerlink" title="1 为什么是GIT而不是SVN"></a>1 为什么是GIT而不是SVN</h4><ul><li>SVN由于是集中式的架构，一旦中央仓库服务器宕机，版本控制工作就彻底失效；GIT是分布式的，每个工作节点都有相对完整的仓库备份，远程仓库离线也不影响正常的版本控制工作。</li><li>SVN绝大部分操作都要请求网络，版本回退或者切换分支比较慢；GIT大部分操作是基于本地的，版本回退或者切换分支非常快（只是移动了Head指针）。</li><li>便于和<code>Jenkins</code>之类的<code>CI/DI</code>测试工作流软件进行集成，进行高效的自动化测试与部署。</li><li>GIT对于文件的存储进行了优化，大幅降低了存储空间占用。</li></ul><h4 id="2-git的工作流图"><a href="#2-git的工作流图" class="headerlink" title="2 git的工作流图"></a>2 git的工作流图</h4><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="git工作流程图"></p><h4 id="3-git的基本操作"><a href="#3-git的基本操作" class="headerlink" title="3 git的基本操作"></a>3 git的基本操作</h4><ol><li><p>clone</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆已经存在的版本库</span></span><br><span class="line">git <span class="built_in">clone</span> http://192.168.10.141:9980/cyj/tp03.git</span><br></pre></td></tr></table></figure></li><li><p>checkout</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作用1 创建分支</span></span><br><span class="line">git checkout -b branchName [commitID / tagName]</span><br><span class="line"><span class="comment"># 作用2 切换分支</span></span><br><span class="line">git checkout branchName</span><br><span class="line"><span class="comment"># 作用3 丢弃工作区改动</span></span><br><span class="line">git checkout .</span><br><span class="line">git checkout -- fileName</span><br></pre></td></tr></table></figure></li><li><p>add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向暂存区添加改动</span></span><br><span class="line">git add .</span><br><span class="line">git add fileName</span><br></pre></td></tr></table></figure></li><li><p>commit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向暂存区提交已经添加进来的改动</span></span><br><span class="line">git commit -m <span class="string">&quot;变更说明&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>pull</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从远端分支获取改动 并与当前分支合并</span></span><br><span class="line">git pull origin main:main</span><br></pre></td></tr></table></figure></li><li><p>fetch （fetch+merge&#x3D;pull）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从远端分支获取改动 不主动与当前分支合并</span></span><br><span class="line">git fetch origin main:tmp</span><br><span class="line"><span class="comment"># 常见的后续操作</span></span><br><span class="line">git diff tmp</span><br><span class="line">git merge tmp</span><br></pre></td></tr></table></figure></li><li><p>merge</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 见上一条</span></span><br></pre></td></tr></table></figure></li><li><p>push</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向远端提交本地分支的改动</span></span><br><span class="line">git push origin main:main</span><br><span class="line"></span><br><span class="line"><span class="comment"># **重要** 只要是改动远端分支都离不开push</span></span><br><span class="line"><span class="comment"># 将指定的标签上传到远程仓库</span></span><br><span class="line">git push origin tagName </span><br><span class="line"><span class="comment"># 将所有不在远程仓库中的标签上传到远程仓库</span></span><br><span class="line">git push origin --tags </span><br><span class="line"><span class="comment"># 删除远端标签</span></span><br><span class="line">git push origin :V1.0.2</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin :branchName </span><br></pre></td></tr></table></figure></li><li><p>status</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前分支的状态</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --graph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看reset之前的历史</span></span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure></li><li><p>diff</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作用见第六条</span></span><br></pre></td></tr></table></figure></li><li><p>init</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将某个文件夹变为一个仓库 （本地先创建版本库 再往远端推送会用到）</span></span><br><span class="line">git init .</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-git进阶操作"><a href="#4-git进阶操作" class="headerlink" title="4 git进阶操作"></a>4 git进阶操作</h4><ol><li><p>丢弃工作区的改动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 丢弃所有改动</span></span><br><span class="line">git checkout .</span><br><span class="line"><span class="comment"># 丢弃单个文件的改动</span></span><br><span class="line">git checkout -- fileName</span><br></pre></td></tr></table></figure></li><li><p>丢弃暂存区的记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 丢弃所有记录</span></span><br><span class="line">git restore --staged .</span><br><span class="line"><span class="comment"># 丢弃单个记录</span></span><br><span class="line">git restore --staged fileName</span><br></pre></td></tr></table></figure></li><li><p>从本地仓库撤销提交 （commit 逆向操作）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git revert commitID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 那么问题来了 他与上面讲的版本回退有什么区别呢</span></span><br><span class="line">git reset --hard commitID</span><br><span class="line"><span class="comment"># 见下图 revert反向commit会有一个新的commit生成 可以回溯你撤销的历史 而reset则不会生成新的commit</span></span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220718152553953.png" alt="image-20220718152553953"></p></li><li><p>时光机（版本回退）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commitID <span class="comment"># 回退版本 并将改动彻底丢弃 （推荐使用）</span></span><br><span class="line"></span><br><span class="line">git reset --soft commitID <span class="comment"># 回退版本 并将改动撤回到暂存中 (回归的状态：已add未commit)</span></span><br><span class="line">git reset --mixed commitID <span class="comment"># 回退版本 并将改动撤回到工作区中 mixed为缺省参数 （回归的状态：未add未commit）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些特殊的简写 (相对于当前Head指针回退一个版本)</span></span><br><span class="line">git reset --hard Head^</span><br><span class="line">git reset --hard Head~1</span><br></pre></td></tr></table></figure></li><li><p>合并别人的代码（解决冲突）</p><blockquote><p>所谓<strong>冲突</strong>是指两个不同commit对同一个文件的同一行进行了不同操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并之前查看分支差异</span></span><br><span class="line">git diff branchName</span><br><span class="line"><span class="comment"># 根据差异解决冲突 然后再合并</span></span><br><span class="line">git merge branchName</span><br></pre></td></tr></table></figure><p>本地和远端同一个文件的同一行存在差异 则会产生冲突，以下是冲突的直观展示：</p><p><code>git fetch</code></p><p><code>git diff origin/main</code></p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220706103112187.png" alt="image-20220706103112187"></p><p>或者IDE里面可以观察到：</p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220706103157989.png" alt="image-20220706103157989"></p></li><li><p>Tag打标发布版本（版本冻结 打包归档）</p><blockquote><p>所谓<strong>Tag</strong>其实就是一种特殊的Branch，主要作用为冻结版本，进行正式版本发布</p></blockquote><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220718143001430.png" alt="image-20220718143001430"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建tag</span></span><br><span class="line">git tag -a V1.0.1 -m <span class="string">&quot;message&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有标签</span></span><br><span class="line">git tag -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签详细信息</span></span><br><span class="line">git show tagName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定的标签上传到远程仓库</span></span><br><span class="line">git push origin tagName </span><br><span class="line"><span class="comment"># 将所有不在远程仓库中的标签上传到远程仓库</span></span><br><span class="line">git push origin --tags </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地标签</span></span><br><span class="line">git tag -d V1.0.2</span><br><span class="line"><span class="comment"># 删除远端标签</span></span><br><span class="line">git push origin :V1.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签打包</span></span><br><span class="line">git archive V1.0.1 --format=zip --output=V1.0.1.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持的打包格式</span></span><br><span class="line">git archive --list</span><br><span class="line">tar</span><br><span class="line">tgz</span><br><span class="line">tar.gz</span><br><span class="line">zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签创建对应的发版分支</span></span><br><span class="line">git checkout -b newBranchName tagName</span><br></pre></td></tr></table></figure><ol start="6"><li>分支操作</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git branch branchName</span><br><span class="line">git checkout -b branchName</span><br><span class="line">git push origin branchName:branchName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch <span class="comment"># 查看本地分支</span></span><br><span class="line">git branch -a <span class="comment"># 查看本地分支+远程分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d branchName <span class="comment"># 删除本地分支</span></span><br><span class="line">git branch -D branchName <span class="comment"># 删除本地分支（强制）</span></span><br><span class="line">git push origin :branchName <span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete branchName <span class="comment"># 删除远程分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过fetch获取更新创建分支</span></span><br><span class="line">git fetch origin main:tmp</span><br><span class="line"><span class="comment"># 通常的后续操作</span></span><br><span class="line">git diff tmp</span><br><span class="line">git merge tmp</span><br><span class="line">git branch -d tmp</span><br></pre></td></tr></table></figure></li></ol><h4 id="5-git的高阶操作"><a href="#5-git的高阶操作" class="headerlink" title="5 git的高阶操作"></a>5 git的高阶操作</h4><ol><li><p>当你正在开发的功能开发了一半，此时来了紧急任务修复重大BUG，你该怎么做？（git stash）</p><blockquote><p>由于功能开发了一半不好提交，但是由于有未提交的文件改动存在，无论是拉取远端，还是切换分支等操作均是做不到的。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时存储改动</span></span><br><span class="line">git stash save <span class="string">&quot;这里是开发了一半的影像中心功能&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常 拉取远端代码  修改bug</span></span><br><span class="line">git pull</span><br><span class="line"><span class="comment"># 修改bug</span></span><br><span class="line"><span class="comment"># bug修改完毕了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复临时改动</span></span><br><span class="line">git stash pop stash@&#123;0&#125;</span><br><span class="line"><span class="comment"># 继续开发影像中心功能</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除临时改动</span></span><br><span class="line">git stash drop stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有的临时存储</span></span><br><span class="line">git stash list</span><br></pre></td></tr></table></figure></li><li><p>当你的个人的个人开发分支A与同事的开发分支B分离比较久了，同事已经修复了一个重大BUG，你也想在你的feature发布前获取这个修复，你该怎么做？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 精确获取其他分支上的指定commit到本分支 并形成一个新的提交</span></span><br><span class="line">git cherry-pick commitID</span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220719153916438.png" alt="image-20220719153916438"></p><blockquote><p>那么问题来了，git merge 与 git cherry-pick 有什么区别呢？</p><p>可以简单理解为：get merge 是我要别人所有的提交（all in了）；git cherry-pick是我需要别人某一个特定的提交</p></blockquote></li><li><p>我把别人远端代码推挂了 我该怎么办？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 远端代码回退</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先回退本地对应分支代码到指定commit</span></span><br><span class="line">git reset --hard commitID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强推使远端分支与本地分支对齐</span></span><br><span class="line"><span class="comment"># 此处必须强推 因为当前分支由于回退过 所以是落后对应的远端分支n个提交的 具体落后几个可以使用git status 查看到</span></span><br><span class="line">git push origin dev:dev -f </span><br></pre></td></tr></table></figure></li><li><p>放弃追踪一些文件或者目录</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有的时间想要查看一下git跟踪了哪些文件，此命令就可以列出所有git正在跟踪的文件</span></span><br><span class="line">git ls-files</span><br><span class="line"></span><br><span class="line"><span class="comment"># git不再跟踪名为FileName的文件，但是文件保留在工作区和暂存区中，也就是你的目录中</span></span><br><span class="line">git <span class="built_in">rm</span> --cached FileName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除名为FileName的文件，同时git不再跟踪它</span></span><br><span class="line">git <span class="built_in">rm</span> FileName</span><br></pre></td></tr></table></figure></li><li><p>强制拉取远端代码</p><blockquote><p>注意这种操作会覆盖掉本地代码</p></blockquote>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取远端的更新</span></span><br><span class="line">git fetch --all</span><br><span class="line"><span class="comment"># 撤销本地、暂存区、版本库(用远程服务器的origin/master替换本地、暂存区、版本库) 强制进度指针对齐</span></span><br><span class="line">git reset --hard origin/master</span><br><span class="line"><span class="comment"># 从远程仓库&quot;同步&quot;代码</span></span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或单条执行：</span></span><br><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master &amp;&amp; git pull</span><br></pre></td></tr></table></figure></li></ol><h4 id="6-常见的难以理解的点"><a href="#6-常见的难以理解的点" class="headerlink" title="6 常见的难以理解的点"></a>6 常见的难以理解的点</h4><ol><li><p>fast-forward的作用</p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220706102201798.png" alt="image-20220706102201798"></p></li><li><p>rebase变基</p></li></ol><blockquote><p>注意变基与合并的区别</p></blockquote><p>  首先通过简单的提交节点图解感受一下rebase在干什么<br>  两个分支master和feature，其中feature是在提交点B处从master上拉出的分支<br>  master上有一个新提交M，feature上有两个新提交C和D</p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/%E5%8F%98%E5%9F%BA1.png" alt="变基1"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git switch feature</span><br><span class="line">git rebase master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上两句等价于 (可以简单理解为：将master里的commit 放到 feature上)</span></span><br><span class="line">git rebase master feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果提示有冲突就解决冲突</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决冲突后继续变基</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/%E5%8F%98%E5%9F%BA2.png" alt="变基2"></p><p>原理说明：</p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/merge.jpg" alt="merge"></p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/rebase.jpg" alt="rebase"></p><h4 id="7-一些规范"><a href="#7-一些规范" class="headerlink" title="7 一些规范"></a>7 一些规范</h4><ol><li><p>git默认的主分支：master分支名已经弃用 现在都叫main分支</p><p>由于黑人开发者的增多，鉴于黑人被种族歧视的历史（Master-Slave），黑人对git中的默认master分支提出抗议，2020年6月8日 Scott 发文呼吁将你的Git默认分支从<code>master</code>修改为<code>main</code>，目前国外各大主流软件商均已更改，Github也已弃用master改用main分支名，以示尊重。</p></li><li><p>大公司一般通用的简单分支模型</p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220706110531715.png" alt="image-20220706110531715"></p></li></ol><blockquote><p>main分支：只用来打标TAG 用户版本代码冻结 进行发版<br>dev分支：用来正常开发 迭代commit<br>feature分支：用来开发新功能，新功能开发完毕之后向dev合并<br>bug分支：类似feature分支 进行bug修复 修复后向dev合并</p></blockquote><ol start="3"><li><p><code>.gitignore</code>文件必须写</p><blockquote><p><code>.gitignore</code>文件必须写，指定无需提交的文件及文件夹</p><p>如：ide的配置 编译产生的中间产物 第三方依赖库 都需要忽略</p></blockquote></li></ol><h4 id="8-git与gitlab的配套使用"><a href="#8-git与gitlab的配套使用" class="headerlink" title="8 git与gitlab的配套使用"></a>8 git与gitlab的配套使用</h4><ol><li>先在gitlab创建空白仓库再克隆</li></ol><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220707114032800.png" alt="image-20220707114032800"></p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220707114101464.png" alt="image-20220707114101464"></p><blockquote><p><em>注意：</em>将仓库地址进行一个替换 如下：</p><p><a href="http://6c4c5ae0240e/cyj/tp03.git">http://6c4c5ae0240e/cyj/tp03.git</a><br><a href="http://192.168.10.141:9980/cyj/tp03.git">http://192.168.10.141:9980/cyj/tp03.git</a></p></blockquote><p><code>git clone http://192.168.10.141:9980/cyj/tp03.git</code></p><ol start="2"><li>针对本地 已经存在的项目 推送到gitlab<ol><li>进入项目目录 执行<code>git init .</code> 初始化仓库</li><li>在gitlab上创建仓库</li></ol></li></ol><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220707114558420.png" alt="image-20220707114558420"></p><p>如果勾选了，会报出如下错误：</p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220707114707492.png" alt="image-20220707114707492"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> existing_repo</span><br><span class="line">git remote add origin http://192.168.10.141:9980/cyj/tp03.git <span class="comment"># 指定远程仓库的位置</span></span><br><span class="line">git branch -M main <span class="comment"># 将当前分支重命名为main （gitlab默认就会创建main作为主分支 作为对应远程分支）</span></span><br><span class="line">git push -uf origin main <span class="comment"># -u表示--set-upstream和远程仓库建立映射关系  其实等价于 git push origin main:main</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>关于项目成员推送提交</p><blockquote><p>默认是需要项目仓库所有者自己审核PR</p></blockquote><p>如果想取消可以进行如下操作：</p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220707115747409.png" alt="image-20220707115747409"></p></li><li><p>如果向远端推送，提示换行符警告，可以执行自动转换命令</p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220708100349895.png" alt="image-20220708100349895"></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 补充知识</span></span><br><span class="line">win： CRLF =&gt; <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">Linux: LF =&gt; <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充知识</span></span><br><span class="line">Git命令行修改AutoCRLF</span><br><span class="line">提交时转换为LF，检出时转换为CRLF（推荐windows）</span><br><span class="line">git config --global core.autocrlf <span class="literal">true</span></span><br><span class="line">提交时转换为LF，检出时不转换（推荐*unix/mac）</span><br><span class="line">git config --global core.autocrlf input</span><br><span class="line">提交检出均不转换</span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Git命令行修改SafeCRLF</span><br><span class="line">拒绝提交包含混合换行符的文件</span><br><span class="line">git config --global core.safecrlf <span class="literal">true</span></span><br><span class="line">允许提交包含混合换行符的文件</span><br><span class="line">git config --global core.safecrlf <span class="literal">false</span></span><br><span class="line">提交包含混合换行符的文件时给出警告</span><br><span class="line">git config --global core.safecrlf warn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐配置</span></span><br><span class="line">提交检出均不转换</span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br><span class="line">允许提交包含混合换行符的文件</span><br><span class="line">git config --global core.safecrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>频繁要求输入账号密码很烦，怎么解决？</p><ul><li>终端执行该命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><ul><li>进行任意一种输需要身份验证的操作 如push pull等 输入一次正确的用户名和密码</li><li>检查你的<code>用户目录</code>下 会出现 <code>.git-credentials</code> 文件  打开后已经写入了用户名和密码 如下图所示</li><li>以后再不会要求输入用户名密码了</li></ul></li></ol><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220803180606437.png" alt="image-20220803180606437"></p><p><img src="https://chengyijun.github.io/2022/07/08/git%E5%9F%B9%E8%AE%AD%E8%AE%B2%E4%B9%89/image-20220803180754460.png" alt="image-20220803180754460"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
